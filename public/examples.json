[{"name":"turf-aggregate","example":"var polygons = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [1.669921, 48.632908],\n          [1.669921, 49.382372],\n          [3.636474, 49.382372],\n          [3.636474, 48.632908],\n          [1.669921, 48.632908]\n        ]]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [2.230224, 47.85003],\n          [2.230224, 48.611121],\n          [4.361572, 48.611121],\n          [4.361572, 47.85003],\n          [2.230224, 47.85003]\n        ]]\n      }\n    }\n  ]\n};\nvar points = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 200\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [2.054443,49.138596]\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 600\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [3.065185,48.850258]\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 100\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [2.329101,48.79239]\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 200\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [2.614746,48.334343]\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 300\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [3.416748,48.056053]\n      }\n    }\n  ]\n};\nvar aggregations = [\n  {\n    aggregation: 'sum',\n    inField: 'population',\n    outField: 'pop_sum'\n  },\n  {\n    aggregation: 'average',\n    inField: 'population',\n    outField: 'pop_avg'\n  },\n  {\n    aggregation: 'median',\n    inField: 'population',\n    outField: 'pop_median'\n  },\n  {\n    aggregation: 'min',\n    inField: 'population',\n    outField: 'pop_min'\n  },\n  {\n    aggregation: 'max',\n    inField: 'population',\n    outField: 'pop_max'\n  },\n  {\n    aggregation: 'deviation',\n    inField: 'population',\n    outField: 'pop_deviation'\n  },\n  {\n    aggregation: 'variance',\n    inField: 'population',\n    outField: 'pop_variance'\n  },\n  {\n    aggregation: 'count',\n    inField: '',\n    outField: 'point_count'\n  }\n];\n\nvar aggregated = turf.aggregate(\n  polygons, points, aggregations);\n\nvar result = turf.featurecollection(\n  points.features.concat(aggregated.features));\n\n//=result","desc":"<h3 id=\"-turf-aggregate-polygons-points-aggregations-\"><code>turf.aggregate(polygons, points, aggregations)</code></h3>\n<p>Calculates a series of aggregations for a set of Point features within a set of Polygon features. Sum, average, count, min, max, and deviation are supported.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>polygons</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Polygon features</td>\n</tr>\n<tr>\n<td><code>points</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Point features</td>\n</tr>\n<tr>\n<td><code>aggregations</code></td>\n<td>Array</td>\n<td>an array of aggregation objects</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var polygons = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [1.669921, 48.632908],\n          [1.669921, 49.382372],\n          [3.636474, 49.382372],\n          [3.636474, 48.632908],\n          [1.669921, 48.632908]\n        ]]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [2.230224, 47.85003],\n          [2.230224, 48.611121],\n          [4.361572, 48.611121],\n          [4.361572, 47.85003],\n          [2.230224, 47.85003]\n        ]]\n      }\n    }\n  ]\n};\nvar points = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 200\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [2.054443,49.138596]\n      }\n    },\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 600\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [3.065185,48.850258]\n      }\n    },\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 100\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [2.329101,48.79239]\n      }\n    },\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 200\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [2.614746,48.334343]\n      }\n    },\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 300\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [3.416748,48.056053]\n      }\n    }\n  ]\n};\nvar aggregations = [\n  {\n    aggregation: &#39;sum&#39;,\n    inField: &#39;population&#39;,\n    outField: &#39;pop_sum&#39;\n  },\n  {\n    aggregation: &#39;average&#39;,\n    inField: &#39;population&#39;,\n    outField: &#39;pop_avg&#39;\n  },\n  {\n    aggregation: &#39;median&#39;,\n    inField: &#39;population&#39;,\n    outField: &#39;pop_median&#39;\n  },\n  {\n    aggregation: &#39;min&#39;,\n    inField: &#39;population&#39;,\n    outField: &#39;pop_min&#39;\n  },\n  {\n    aggregation: &#39;max&#39;,\n    inField: &#39;population&#39;,\n    outField: &#39;pop_max&#39;\n  },\n  {\n    aggregation: &#39;deviation&#39;,\n    inField: &#39;population&#39;,\n    outField: &#39;pop_deviation&#39;\n  },\n  {\n    aggregation: &#39;variance&#39;,\n    inField: &#39;population&#39;,\n    outField: &#39;pop_variance&#39;\n  },\n  {\n    aggregation: &#39;count&#39;,\n    inField: &#39;&#39;,\n    outField: &#39;point_count&#39;\n  }\n];\n\nvar aggregated = turf.aggregate(\n  polygons, points, aggregations);\n\nvar result = turf.featurecollection(\n  points.features.concat(aggregated.features));\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, a FeatureCollection of Polygon features with properties listed as outField values in aggregations</p>\n"},{"name":"turf-along","example":"var line = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"LineString\",\n    \"coordinates\": [\n      [-77.031669, 38.878605],\n      [-77.029609, 38.881946],\n      [-77.020339, 38.884084],\n      [-77.025661, 38.885821],\n      [-77.021884, 38.889563],\n      [-77.019824, 38.892368]\n    ]\n  }\n};\n\nvar along = turf.along(line, 1, 'miles');\n\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [line, along]\n};\n\n//=result","desc":"<h3 id=\"-turf-along-line-distance-units-miles-\"><code>turf.along(line, distance, [units=miles])</code></h3>\n<p>Takes a LineString feature and returns a Point feature at a specified distance along a line.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>line</code></td>\n<td>LineString</td>\n<td>a LineString feature</td>\n</tr>\n<tr>\n<td><code>distance</code></td>\n<td>Number</td>\n<td>distance along the line</td>\n</tr>\n<tr>\n<td><code>[units=miles]</code></td>\n<td>String</td>\n<td><em>optional:</em> can be degrees, radians, miles, or kilometers</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var line = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {},\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;LineString&quot;,\n    &quot;coordinates&quot;: [\n      [-77.031669, 38.878605],\n      [-77.029609, 38.881946],\n      [-77.020339, 38.884084],\n      [-77.025661, 38.885821],\n      [-77.021884, 38.889563],\n      [-77.019824, 38.892368]\n    ]\n  }\n};\n\nvar along = turf.along(line, 1, &#39;miles&#39;);\n\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [line, along]\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>Point</code>, Point along the line at distance distance</p>\n"},{"name":"turf-area","example":"var polygons = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [-67.031021, 10.458102],\n          [-67.031021, 10.53372],\n          [-66.929397, 10.53372],\n          [-66.929397, 10.458102],\n          [-67.031021, 10.458102]\n        ]]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [-66.919784, 10.397325],\n          [-66.919784, 10.513467],\n          [-66.805114, 10.513467],\n          [-66.805114, 10.397325],\n          [-66.919784, 10.397325]\n        ]]\n      }\n    }\n  ]\n};\n\nvar area = turf.area(polygons);\n\n//=area","desc":"<h3 id=\"-turf-area-input-\"><code>turf.area(input)</code></h3>\n<p>Takes a GeoJSON feature or FeatureCollection of any type and returns the area of that feature in square meters.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>input</code></td>\n<td>GeoJSON</td>\n<td>a Feature or FeatureCollection of any type</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var polygons = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [-67.031021, 10.458102],\n          [-67.031021, 10.53372],\n          [-66.929397, 10.53372],\n          [-66.929397, 10.458102],\n          [-67.031021, 10.458102]\n        ]]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [-66.919784, 10.397325],\n          [-66.919784, 10.513467],\n          [-66.805114, 10.513467],\n          [-66.805114, 10.397325],\n          [-66.919784, 10.397325]\n        ]]\n      }\n    }\n  ]\n};\n\nvar area = turf.area(polygons);\n\n//=area\n</code></pre>\n<p><strong>Returns</strong> <code>Number</code>, area in square meters</p>\n"},{"name":"turf-average","example":"var polygons = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [10.666351, 59.890659],\n          [10.666351, 59.936784],\n          [10.762481, 59.936784],\n          [10.762481, 59.890659],\n          [10.666351, 59.890659]\n        ]]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [10.764541, 59.889281],\n          [10.764541, 59.937128],\n          [10.866165, 59.937128],\n          [10.866165, 59.889281],\n          [10.764541, 59.889281]\n        ]]\n      }\n    }\n  ]\n};\nvar points = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 200\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [10.724029, 59.926807]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 600\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [10.715789, 59.904778]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 100\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [10.746002, 59.908566]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 200\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [10.806427, 59.908910]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 300\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [10.79544, 59.931624]\n      }\n    }\n  ]\n};\n\nvar averaged = turf.average(\n polygons, points, 'population', 'pop_avg');\n\nvar resultFeatures = points.features.concat(\n  averaged.features);\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": resultFeatures\n};\n\n//=result","desc":"<h3 id=\"-turf-average-polygons-points-field-outputfield-\"><code>turf.average(polygons, points, field, outputField)</code></h3>\n<p>Calculates the average value of a field for a set of Point features within a set of Polygon features.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>polygons</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Polygon features</td>\n</tr>\n<tr>\n<td><code>points</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Point features</td>\n</tr>\n<tr>\n<td><code>field</code></td>\n<td>string</td>\n<td>the field in the points features from which to pull values to average</td>\n</tr>\n<tr>\n<td><code>outputField</code></td>\n<td>string</td>\n<td>the field in the polygons FeatureCollection to put results of the averages</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var polygons = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [10.666351, 59.890659],\n          [10.666351, 59.936784],\n          [10.762481, 59.936784],\n          [10.762481, 59.890659],\n          [10.666351, 59.890659]\n        ]]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [10.764541, 59.889281],\n          [10.764541, 59.937128],\n          [10.866165, 59.937128],\n          [10.866165, 59.889281],\n          [10.764541, 59.889281]\n        ]]\n      }\n    }\n  ]\n};\nvar points = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 200\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [10.724029, 59.926807]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 600\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [10.715789, 59.904778]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 100\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [10.746002, 59.908566]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 200\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [10.806427, 59.908910]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 300\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [10.79544, 59.931624]\n      }\n    }\n  ]\n};\n\nvar averaged = turf.average(\n polygons, points, &#39;population&#39;, &#39;pop_avg&#39;);\n\nvar resultFeatures = points.features.concat(\n  averaged.features);\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: resultFeatures\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, a FeatureCollection of Polygon features with the value of outField set to the calculated average</p>\n"},{"name":"turf-bbox-polygon","example":"var bbox = [0, 0, 10, 10];\n\nvar poly = turf.bboxPolygon(bbox);\n\n//=poly","desc":"<h3 id=\"-turf-bbox-polygon-bbox-\"><code>turf.bbox-polygon(bbox)</code></h3>\n<p>Takes a bbox and returns the equivalent Polygon feature.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>bbox</code></td>\n<td>Array.\\<number\\></td>\n<td>an Array of bounding box coordinates in the form: [xLow, yLow, xHigh, yHigh]</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var bbox = [0, 0, 10, 10];\n\nvar poly = turf.bboxPolygon(bbox);\n\n//=poly\n</code></pre>\n<p><strong>Returns</strong> <code>Polygon</code>, a Polygon representation of the bounding box</p>\n"},{"name":"turf-bearing","example":"var point1 = {\n  \"type\": \"Feature\",\n  \"properties\": {\n    \"marker-color\": '#f00'\n  },\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [-75.343, 39.984]\n  }\n};\nvar point2 = {\n  \"type\": \"Feature\",\n  \"properties\": {\n    \"marker-color\": '#0f0'\n  },\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [-75.534, 39.123]\n  }\n};\n\nvar points = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [point1, point2]\n};\n\n//=points\n\nvar bearing = turf.bearing(point1, point2);\n\n//=bearing","desc":"<h3 id=\"-turf-bearing-start-end-\"><code>turf.bearing(start, end)</code></h3>\n<p>Takes two Point features and finds the bearing between them.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>start</code></td>\n<td>Point</td>\n<td>starting Point</td>\n</tr>\n<tr>\n<td><code>end</code></td>\n<td>Point</td>\n<td>ending Point</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var point1 = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {\n    &quot;marker-color&quot;: &#39;#f00&#39;\n  },\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Point&quot;,\n    &quot;coordinates&quot;: [-75.343, 39.984]\n  }\n};\nvar point2 = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {\n    &quot;marker-color&quot;: &#39;#0f0&#39;\n  },\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Point&quot;,\n    &quot;coordinates&quot;: [-75.534, 39.123]\n  }\n};\n\nvar points = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [point1, point2]\n};\n\n//=points\n\nvar bearing = turf.bearing(point1, point2);\n\n//=bearing\n</code></pre>\n<p><strong>Returns</strong> <code>Number</code>, bearing in decimal degrees</p>\n"},{"name":"turf-bezier","example":"var line = {\n  \"type\": \"Feature\",\n  \"properties\": {\n    \"stroke\": \"#f00\"\n  },\n  \"geometry\": {\n    \"type\": \"LineString\",\n    \"coordinates\": [\n      [-76.091308, 18.427501],\n      [-76.695556, 18.729501],\n      [-76.552734, 19.40443],\n      [-74.61914, 19.134789],\n      [-73.652343, 20.07657],\n      [-73.157958, 20.210656]\n    ]\n  }\n};\n\nvar curved = turf.bezier(line);\ncurved.properties = { stroke: '#0f0' };\n\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [line, curved]\n};\n\n//=result","desc":"<h3 id=\"-turf-bezier-line-resolution-10000-sharpness-0-85-\"><code>turf.bezier(line, [resolution=10000], [sharpness=0.85])</code></h3>\n<p>Takes a LineString feature and returns a curved version of the line by applying a Bezier splinealgorithm.The bezier spline implementation is by Leszek Rybicki.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>line</code></td>\n<td>LineString</td>\n<td>the input LineString</td>\n</tr>\n<tr>\n<td><code>[resolution=10000]</code></td>\n<td>number</td>\n<td><em>optional:</em> time in milliseconds between points</td>\n</tr>\n<tr>\n<td><code>[sharpness=0.85]</code></td>\n<td>number</td>\n<td><em>optional:</em> a measure of how curvy the path should be between splines</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var line = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {\n    &quot;stroke&quot;: &quot;#f00&quot;\n  },\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;LineString&quot;,\n    &quot;coordinates&quot;: [\n      [-76.091308, 18.427501],\n      [-76.695556, 18.729501],\n      [-76.552734, 19.40443],\n      [-74.61914, 19.134789],\n      [-73.652343, 20.07657],\n      [-73.157958, 20.210656]\n    ]\n  }\n};\n\nvar curved = turf.bezier(line);\ncurved.properties = { stroke: &#39;#0f0&#39; };\n\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [line, curved]\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>LineString</code>, curved line</p>\n"},{"name":"turf-buffer","example":"var pt = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [-90.548630, 14.616599]\n  }\n};\nvar unit = 'miles';\n\nvar buffered = turf.buffer(pt, 500, unit);\n\nvar resultFeatures = buffered.features.concat(pt);\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": resultFeatures\n};\n\n//=result","desc":"<h3 id=\"-turf-buffer-feature-distance-unit-\"><code>turf.buffer(feature, distance, unit)</code></h3>\n<p>Calculates a buffer for a Point, LineString, or Polygon Feature/FeatureCollection for a given radius. Units supported are miles, kilometers, and degrees.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>feature</code></td>\n<td>FeatureCollection</td>\n<td>a Feature or FeatureCollection of any type</td>\n</tr>\n<tr>\n<td><code>distance</code></td>\n<td>Number</td>\n<td>distance to draw the buffer</td>\n</tr>\n<tr>\n<td><code>unit</code></td>\n<td>String</td>\n<td>&#39;miles&#39; or &#39;kilometers&#39;</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var pt = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {},\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Point&quot;,\n    &quot;coordinates&quot;: [-90.548630, 14.616599]\n  }\n};\nvar unit = &#39;miles&#39;;\n\nvar buffered = turf.buffer(pt, 500, unit);\n\nvar resultFeatures = buffered.features.concat(pt);\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: resultFeatures\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, a FeatureCollection containing Polygon features representing buffers </p>\n"},{"name":"turf-center","example":"var features = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-97.522259, 35.4691]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-97.502754, 35.463455]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-97.508269, 35.463245]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-97.516809, 35.465779]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-97.515372, 35.467072]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-97.509363, 35.463053]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-97.511123, 35.466601]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-97.518547, 35.469327]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-97.519706, 35.469659]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-97.517839, 35.466998]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-97.508678, 35.464942]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-97.514914, 35.463453]\n      }\n    }\n  ]\n};\n\nvar centerPt = turf.center(features);\ncenterPt.properties['marker-size'] = 'large';\ncenterPt.properties['marker-color'] = '#000';\n\nvar resultFeatures = features.features.concat(centerPt);\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": resultFeatures\n};\n\n//=result","desc":"<h3 id=\"-turf-center-features-\"><code>turf.center(features)</code></h3>\n<p>Takes a FeatureCollection of any type and returns the absolute center point of all features.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>features</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of any type</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var features = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-97.522259, 35.4691]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-97.502754, 35.463455]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-97.508269, 35.463245]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-97.516809, 35.465779]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-97.515372, 35.467072]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-97.509363, 35.463053]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-97.511123, 35.466601]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-97.518547, 35.469327]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-97.519706, 35.469659]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-97.517839, 35.466998]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-97.508678, 35.464942]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-97.514914, 35.463453]\n      }\n    }\n  ]\n};\n\nvar centerPt = turf.center(features);\ncenterPt.properties[&#39;marker-size&#39;] = &#39;large&#39;;\ncenterPt.properties[&#39;marker-color&#39;] = &#39;#000&#39;;\n\nvar resultFeatures = features.features.concat(centerPt);\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: resultFeatures\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>Point</code>, a Point feature at the absolute center point of all input features</p>\n"},{"name":"turf-centroid","example":"var poly = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Polygon\",\n    \"coordinates\": [[\n      [105.818939,21.004714],\n      [105.818939,21.061754],\n      [105.890007,21.061754],\n      [105.890007,21.004714],\n      [105.818939,21.004714]\n    ]]\n  }\n};\n\nvar centroidPt = turf.centroid(poly);\n\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [poly, centroidPt]\n};\n\n//=result","desc":"<h3 id=\"-turf-centroid-features-\"><code>turf.centroid(features)</code></h3>\n<p>Takes a Feature or FeatureCollection of any type and calculates the centroid using the arithmetic mean of all vertices. This lessens the effect of small islands and artifacts when calculatingthe centroid of a set of polygons.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>features</code></td>\n<td>GeoJSON</td>\n<td>a Feature or FeatureCollection of any type</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var poly = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {},\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Polygon&quot;,\n    &quot;coordinates&quot;: [[\n      [105.818939,21.004714],\n      [105.818939,21.061754],\n      [105.890007,21.061754],\n      [105.890007,21.004714],\n      [105.818939,21.004714]\n    ]]\n  }\n};\n\nvar centroidPt = turf.centroid(poly);\n\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [poly, centroidPt]\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>Point</code>, a Point feature at the centroid of the input feature(s)</p>\n"},{"name":"turf-combine","example":"var fc = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [19.026432, 47.49134]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [19.074497, 47.509548]\n      }\n    }\n  ]\n};\n\nvar combined = turf.combine(fc);\n\n//=combined","desc":"<h3 id=\"-turf-combine-fc-\"><code>turf.combine(fc)</code></h3>\n<p>Combines a FeatureCollection of Point, LineString, or Polygon features into MultiPoint, MultiLineString, or MultiPolygon features.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>fc</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of any type</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var fc = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [19.026432, 47.49134]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [19.074497, 47.509548]\n      }\n    }\n  ]\n};\n\nvar combined = turf.combine(fc);\n\n//=combined\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, a FeatureCollection of corresponding type to input</p>\n"},{"name":"turf-concave","example":"var points = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-63.601226, 44.642643]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-63.591442, 44.651436]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-63.580799, 44.648749]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-63.573589, 44.641788]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-63.587665, 44.64533]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-63.595218, 44.64765]\n      }\n    }\n  ]\n};\n\nvar hull = turf.concave(points, 1, 'miles');\n\nvar resultFeatures = points.features.concat(hull);\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": resultFeatures\n};\n\n//=result","desc":"<h3 id=\"-turf-concave-points-maxedge-units-\"><code>turf.concave(points, maxEdge, units)</code></h3>\n<p>Takes a FeatureCollection of Point features and returns a concave hull.Internally, this implementsa Monotone chain algorithm.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>points</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Point features</td>\n</tr>\n<tr>\n<td><code>maxEdge</code></td>\n<td>number</td>\n<td>the size of an edge necessary for part of the hull to become concave (in miles)</td>\n</tr>\n<tr>\n<td><code>units</code></td>\n<td>String</td>\n<td>used for maxEdge distance (miles or kilometers)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var points = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-63.601226, 44.642643]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-63.591442, 44.651436]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-63.580799, 44.648749]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-63.573589, 44.641788]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-63.587665, 44.64533]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-63.595218, 44.64765]\n      }\n    }\n  ]\n};\n\nvar hull = turf.concave(points, 1, &#39;miles&#39;);\n\nvar resultFeatures = points.features.concat(hull);\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: resultFeatures\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>Feature</code>, a Polygon feature</p>\n"},{"name":"turf-convex","example":"var points = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [10.195312, 43.755225]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [10.404052, 43.8424511]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [10.579833, 43.659924]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [10.360107, 43.516688]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [10.14038, 43.588348]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [10.195312, 43.755225]\n      }\n    }\n  ]\n};\n\nvar hull = turf.convex(points);\n\nvar resultFeatures = points.features.concat(hull);\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": resultFeatures\n};\n\n//=result","desc":"<h3 id=\"-turf-convex-input-\"><code>turf.convex(input)</code></h3>\n<p>Takes any GeoJSON object and returns a convex hull polygon.Internally this usesthe convex-hull module thatimplements a monotone chain hull.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>input</code></td>\n<td>GeoJSON</td>\n<td>any GeoJSON object</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var points = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [10.195312, 43.755225]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [10.404052, 43.8424511]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [10.579833, 43.659924]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [10.360107, 43.516688]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [10.14038, 43.588348]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [10.195312, 43.755225]\n      }\n    }\n  ]\n};\n\nvar hull = turf.convex(points);\n\nvar resultFeatures = points.features.concat(hull);\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: resultFeatures\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>Feature</code>, a Polygon feature</p>\n"},{"name":"turf-count","example":"var polygons = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [-112.072391,46.586591],\n          [-112.072391,46.61761],\n          [-112.028102,46.61761],\n          [-112.028102,46.586591],\n          [-112.072391,46.586591]\n        ]]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [-112.023983,46.570426],\n          [-112.023983,46.615016],\n          [-111.966133,46.615016],\n          [-111.966133,46.570426],\n          [-112.023983,46.570426]\n        ]]\n      }\n    }\n  ]\n};\nvar points = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 200\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-112.0372, 46.608058]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 600\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-112.045955, 46.596264]\n      }\n    }\n  ]\n};\n\nvar counted = turf.count(polygons, points, 'pt_count');\n\nvar resultFeatures = points.features.concat(counted.features);\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": resultFeatures\n};\n\n//=result","desc":"<h3 id=\"-turf-count-polygons-points-countfield-\"><code>turf.count(polygons, points, countField)</code></h3>\n<p>Takes a FeatureCollection of Point features and a FeatureCollection of Polygon features and calculates the number of points that fall within the set of polygons.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>polygons</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Polygon features</td>\n</tr>\n<tr>\n<td><code>points</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Point features</td>\n</tr>\n<tr>\n<td><code>countField</code></td>\n<td>String</td>\n<td>a field to append to the attributes of the Polygon features representing Point counts</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var polygons = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [-112.072391,46.586591],\n          [-112.072391,46.61761],\n          [-112.028102,46.61761],\n          [-112.028102,46.586591],\n          [-112.072391,46.586591]\n        ]]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [-112.023983,46.570426],\n          [-112.023983,46.615016],\n          [-111.966133,46.615016],\n          [-111.966133,46.570426],\n          [-112.023983,46.570426]\n        ]]\n      }\n    }\n  ]\n};\nvar points = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 200\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-112.0372, 46.608058]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 600\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-112.045955, 46.596264]\n      }\n    }\n  ]\n};\n\nvar counted = turf.count(polygons, points, &#39;pt_count&#39;);\n\nvar resultFeatures = points.features.concat(counted.features);\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: resultFeatures\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, a FeatureCollection of Polygon features with countField appended</p>\n"},{"name":"turf-destination","example":"var point = {\n  \"type\": \"Feature\",\n  \"properties\": {\n    \"marker-color\": \"#0f0\"\n  },\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [-75.343, 39.984]\n  }\n};\nvar distance = 50;\nvar bearing = 90;\nvar units = 'miles';\n\nvar destination = turf.destination(point, distance, bearing, units);\ndestination.properties['marker-color'] = '#f00';\n\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [point, destination]\n};\n\n//=result","desc":"<h3 id=\"-turf-destination-start-distance-bearing-units-\"><code>turf.destination(start, distance, bearing, units)</code></h3>\n<p>Takes a Point feature and calculates the location of a destination point given a distance in degrees, radians, miles, or kilometers; and bearing in degrees. This uses the Haversine formula to account for global curvature.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>start</code></td>\n<td>Point</td>\n<td>a Point feature at the starting point</td>\n</tr>\n<tr>\n<td><code>distance</code></td>\n<td>Number</td>\n<td>distance from the starting point</td>\n</tr>\n<tr>\n<td><code>bearing</code></td>\n<td>Number</td>\n<td>ranging from -180 to 180</td>\n</tr>\n<tr>\n<td><code>units</code></td>\n<td>String</td>\n<td>miles, kilometers, degrees, or radians</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var point = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {\n    &quot;marker-color&quot;: &quot;#0f0&quot;\n  },\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Point&quot;,\n    &quot;coordinates&quot;: [-75.343, 39.984]\n  }\n};\nvar distance = 50;\nvar bearing = 90;\nvar units = &#39;miles&#39;;\n\nvar destination = turf.destination(point, distance, bearing, units);\ndestination.properties[&#39;marker-color&#39;] = &#39;#f00&#39;;\n\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [point, destination]\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>Point</code>, a Point feature at the destination</p>\n"},{"name":"turf-deviation","example":"var polygons = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [-97.807159, 30.270335],\n          [-97.807159, 30.369913],\n          [-97.612838, 30.369913],\n          [-97.612838, 30.270335],\n          [-97.807159, 30.270335]\n        ]]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [-97.825698, 30.175405],\n          [-97.825698, 30.264404],\n          [-97.630691, 30.264404],\n          [-97.630691, 30.175405],\n          [-97.825698, 30.175405]\n        ]]\n      }\n    }\n  ]\n};\nvar points = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 500\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-97.709655, 30.311245]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 400\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-97.766647, 30.345028]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 600\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-97.765274, 30.294646]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 500\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-97.753601, 30.216355]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 200\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-97.667083, 30.208047]\n      }\n    }\n  ]\n};\n\nvar inField = \"population\";\nvar outField = \"pop_deviation\";\n\nvar deviated = turf.deviation(\n  polygons, points, inField, outField);\n\nvar resultFeatures = points.features.concat(\n  deviated.features);\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": resultFeatures\n};\n\n//=result","desc":"<h3 id=\"-turf-deviation-polygons-points-infield-outfield-\"><code>turf.deviation(polygons, points, inField, outField)</code></h3>\n<p>Calculates the standard deviation value of a field for points within a set of polygons.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>polygons</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Polygon features</td>\n</tr>\n<tr>\n<td><code>points</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Point features</td>\n</tr>\n<tr>\n<td><code>inField</code></td>\n<td>String</td>\n<td>the field in points from which to aggregate</td>\n</tr>\n<tr>\n<td><code>outField</code></td>\n<td>String</td>\n<td>the field to append to polygons representing deviation</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var polygons = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [-97.807159, 30.270335],\n          [-97.807159, 30.369913],\n          [-97.612838, 30.369913],\n          [-97.612838, 30.270335],\n          [-97.807159, 30.270335]\n        ]]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [-97.825698, 30.175405],\n          [-97.825698, 30.264404],\n          [-97.630691, 30.264404],\n          [-97.630691, 30.175405],\n          [-97.825698, 30.175405]\n        ]]\n      }\n    }\n  ]\n};\nvar points = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 500\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-97.709655, 30.311245]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 400\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-97.766647, 30.345028]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 600\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-97.765274, 30.294646]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 500\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-97.753601, 30.216355]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 200\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-97.667083, 30.208047]\n      }\n    }\n  ]\n};\n\nvar inField = &quot;population&quot;;\nvar outField = &quot;pop_deviation&quot;;\n\nvar deviated = turf.deviation(\n  polygons, points, inField, outField);\n\nvar resultFeatures = points.features.concat(\n  deviated.features);\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: resultFeatures\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, a FeatureCollection of Polygon features with appended field representing deviation</p>\n"},{"name":"turf-distance","example":"var point1 = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [-75.343, 39.984]\n  }\n};\nvar point2 = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [-75.534, 39.123]\n  }\n};\nvar units = \"miles\";\n\nvar points = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [point1, point2]\n};\n\n//=points\n\nvar distance = turf.distance(point1, point2, units);\n\n//=distance","desc":"<h3 id=\"-turf-distance-from-to-units-kilometers-\"><code>turf.distance(from, to, [units=kilometers])</code></h3>\n<p>Takes two Point features and calculates the distance between them in degress, radians,miles, or kilometers. This uses theHaversine formulato account for global curvature.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>from</code></td>\n<td>Feature</td>\n<td>origin point</td>\n</tr>\n<tr>\n<td><code>to</code></td>\n<td>Feature</td>\n<td>destination point</td>\n</tr>\n<tr>\n<td><code>[units=kilometers]</code></td>\n<td>String</td>\n<td><em>optional:</em> can be degrees, radians, miles, or kilometers</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var point1 = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {},\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Point&quot;,\n    &quot;coordinates&quot;: [-75.343, 39.984]\n  }\n};\nvar point2 = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {},\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Point&quot;,\n    &quot;coordinates&quot;: [-75.534, 39.123]\n  }\n};\nvar units = &quot;miles&quot;;\n\nvar points = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [point1, point2]\n};\n\n//=points\n\nvar distance = turf.distance(point1, point2, units);\n\n//=distance\n</code></pre>\n<p><strong>Returns</strong> <code>Number</code>, distance between the two points</p>\n"},{"name":"turf-envelope","example":"var fc = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"name\": \"Location A\"\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-75.343, 39.984]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"name\": \"Location B\"\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-75.833, 39.284]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"name\": \"Location C\"\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-75.534, 39.123]\n      }\n    }\n  ]\n};\n\nvar enveloped = turf.envelope(fc);\n\nvar resultFeatures = fc.features.concat(enveloped);\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": resultFeatures\n};\n\n//=result","desc":"<h3 id=\"-turf-envelope-fc-\"><code>turf.envelope(fc)</code></h3>\n<p>Takes a Feature or FeatureCollection and returns a rectangular Polygon feature that encompasses all vertices.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>fc</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of any type</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var fc = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;name&quot;: &quot;Location A&quot;\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-75.343, 39.984]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;name&quot;: &quot;Location B&quot;\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-75.833, 39.284]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;name&quot;: &quot;Location C&quot;\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-75.534, 39.123]\n      }\n    }\n  ]\n};\n\nvar enveloped = turf.envelope(fc);\n\nvar resultFeatures = fc.features.concat(enveloped);\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: resultFeatures\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>Polygon</code>, a rectangular Polygon feature that encompasses all vertices</p>\n"},{"name":"turf-erase","example":"var poly1 = {\n  \"type\": \"Feature\",\n  \"properties\": {\n    \"fill\": \"#0f0\"\n  },\n  \"geometry\": {\n    \"type\": \"Polygon\",\n    \"coordinates\": [[\n      [-46.738586, -23.596711],\n      [-46.738586, -23.458207],\n      [-46.560058, -23.458207],\n      [-46.560058, -23.596711],\n      [-46.738586, -23.596711]\n    ]]\n  }\n};\nvar poly2 = {\n  \"type\": \"Feature\",\n  \"properties\": {\n    \"fill\": \"#00f\"\n  },\n  \"geometry\": {\n    \"type\": \"Polygon\",\n    \"coordinates\": [[\n      [-46.650009, -23.631314],\n      [-46.650009, -23.5237],\n      [-46.509246, -23.5237],\n      [-46.509246, -23.631314],\n      [-46.650009, -23.631314]\n    ]]\n  }\n};\n\nvar erased = turf.erase(poly1, poly2);\nerased.properties.fill = '#f00';\n\nvar polygons = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [poly1, poly2]\n};\n\n//=polygons\n\n//=erased","desc":"<h3 id=\"-turf-erase-poly1-poly2-\"><code>turf.erase(poly1, poly2)</code></h3>\n<p>Finds the difference between two polygons by clipping the second polygon from the first.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>poly1</code></td>\n<td>Polygon</td>\n<td>input Polygon feaure</td>\n</tr>\n<tr>\n<td><code>poly2</code></td>\n<td>Polygon</td>\n<td>Polygon feature to erase from poly1</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var poly1 = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {\n    &quot;fill&quot;: &quot;#0f0&quot;\n  },\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Polygon&quot;,\n    &quot;coordinates&quot;: [[\n      [-46.738586, -23.596711],\n      [-46.738586, -23.458207],\n      [-46.560058, -23.458207],\n      [-46.560058, -23.596711],\n      [-46.738586, -23.596711]\n    ]]\n  }\n};\nvar poly2 = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {\n    &quot;fill&quot;: &quot;#00f&quot;\n  },\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Polygon&quot;,\n    &quot;coordinates&quot;: [[\n      [-46.650009, -23.631314],\n      [-46.650009, -23.5237],\n      [-46.509246, -23.5237],\n      [-46.509246, -23.631314],\n      [-46.650009, -23.631314]\n    ]]\n  }\n};\n\nvar erased = turf.erase(poly1, poly2);\nerased.properties.fill = &#39;#f00&#39;;\n\nvar polygons = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [poly1, poly2]\n};\n\n//=polygons\n\n//=erased\n</code></pre>\n<p><strong>Returns</strong> <code>Polygon</code>, a Polygon feature showing the area of poly1 excluding the area of poly2</p>\n"},{"name":"turf-explode","example":"var poly = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Polygon\",\n    \"coordinates\": [[\n      [177.434692, -17.77517],\n      [177.402076, -17.779093],\n      [177.38079, -17.803937],\n      [177.40242, -17.826164],\n      [177.438468, -17.824857],\n      [177.454948, -17.796746],\n      [177.434692, -17.77517]\n    ]]\n  }\n};\n\nvar points = turf.explode(poly);\n\n//=poly\n\n//=points","desc":"<h3 id=\"-turf-explode-input-\"><code>turf.explode(input)</code></h3>\n<p>Takes any GeoJSON object and return all positions as a FeatureCollection of Point features.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>input</code></td>\n<td>GeoJSON</td>\n<td>input features</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var poly = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {},\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Polygon&quot;,\n    &quot;coordinates&quot;: [[\n      [177.434692, -17.77517],\n      [177.402076, -17.779093],\n      [177.38079, -17.803937],\n      [177.40242, -17.826164],\n      [177.438468, -17.824857],\n      [177.454948, -17.796746],\n      [177.434692, -17.77517]\n    ]]\n  }\n};\n\nvar points = turf.explode(poly);\n\n//=poly\n\n//=points\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, a FeatureCollection of Point features representing the exploded input features</p>\n"},{"name":"turf-extent","example":"var input = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [114.175329, 22.2524]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [114.170007, 22.267969]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [114.200649, 22.274641]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [114.186744, 22.265745]\n      }\n    }\n  ]\n};\n\nvar bbox = turf.extent(input);\n\nvar bboxPolygon = turf.bboxPolygon(bbox);\n\nvar resultFeatures = input.features.concat(bboxPolygon);\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": resultFeatures\n};\n\n//=result","desc":"<h3 id=\"-turf-extent-input-\"><code>turf.extent(input)</code></h3>\n<p>Takes any GeoJSON object, calculates the extent of all input features, and returns a bounding box.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>input</code></td>\n<td>GeoJSON</td>\n<td>any valid GeoJSON Object</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var input = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [114.175329, 22.2524]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [114.170007, 22.267969]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [114.200649, 22.274641]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [114.186744, 22.265745]\n      }\n    }\n  ]\n};\n\nvar bbox = turf.extent(input);\n\nvar bboxPolygon = turf.bboxPolygon(bbox);\n\nvar resultFeatures = input.features.concat(bboxPolygon);\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: resultFeatures\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>Array.&lt;number&gt;</code>, the bounding box of input given as an array in WSEN order (west, south, east, north)</p>\n"},{"name":"turf-featurecollection","example":"var features = [\n turf.point([-75.343, 39.984], {name: 'Location A'}),\n turf.point([-75.833, 39.284], {name: 'Location B'}),\n turf.point([-75.534, 39.123], {name: 'Location C'})\n];\n\nvar fc = turf.featurecollection(features);\n\n//=fc","desc":"<h3 id=\"-turf-featurecollection-features-\"><code>turf.featurecollection(features)</code></h3>\n<p>Takes one or more Feature|Features and creates a FeatureCollection</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>features</code></td>\n<td>Feature</td>\n<td>input Features</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var features = [\n turf.point([-75.343, 39.984], {name: &#39;Location A&#39;}),\n turf.point([-75.833, 39.284], {name: &#39;Location B&#39;}),\n turf.point([-75.534, 39.123], {name: &#39;Location C&#39;})\n];\n\nvar fc = turf.featurecollection(features);\n\n//=fc\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, a FeatureCollection of input features</p>\n"},{"name":"turf-filter","example":"var features = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"species\": \"oak\"\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-72.581777, 44.260875]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"species\": \"birch\"\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-72.570018, 44.260691]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"species\": \"oak\"\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-72.576284, 44.257925]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"species\": \"redwood\"\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-72.56916, 44.254605]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"species\": \"maple\"\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-72.581691, 44.24858]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"species\": \"oak\"\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-72.583837, 44.255773]\n      }\n    }\n  ]\n};\n\nvar key = \"species\";\nvar value = \"oak\";\n\nvar filtered = turf.filter(features, key, value);\n\n//=features\n\n//=filtered","desc":"<h3 id=\"-turf-filter-features-key-value-\"><code>turf.filter(features, key, value)</code></h3>\n<p>Takes a FeatureCollection and filters it by a given property and value</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>features</code></td>\n<td>FeatureCollection</td>\n<td>input FeatureCollection of any type</td>\n</tr>\n<tr>\n<td><code>key</code></td>\n<td>String</td>\n<td>the property on which to filter</td>\n</tr>\n<tr>\n<td><code>value</code></td>\n<td>String</td>\n<td>the value of that property on which to filter</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var features = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;species&quot;: &quot;oak&quot;\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-72.581777, 44.260875]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;species&quot;: &quot;birch&quot;\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-72.570018, 44.260691]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;species&quot;: &quot;oak&quot;\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-72.576284, 44.257925]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;species&quot;: &quot;redwood&quot;\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-72.56916, 44.254605]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;species&quot;: &quot;maple&quot;\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-72.581691, 44.24858]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;species&quot;: &quot;oak&quot;\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-72.583837, 44.255773]\n      }\n    }\n  ]\n};\n\nvar key = &quot;species&quot;;\nvar value = &quot;oak&quot;;\n\nvar filtered = turf.filter(features, key, value);\n\n//=features\n\n//=filtered\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, a filtered collection with only features that match input key and value</p>\n"},{"name":"turf-flip","example":"var serbia = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [20.566406, 43.421008]\n  }\n};\n\n//=serbia\n\nvar saudiArabia = turf.flip(serbia);\n\n//=saudiArabia","desc":"<h3 id=\"-turf-flip-input-\"><code>turf.flip(input)</code></h3>\n<p>Takes a GeoJSON object of any type and flips all of its coordinates from [x, y] to [y, x].</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>input</code></td>\n<td>GeoJSON</td>\n<td>input GeoJSON object</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var serbia = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {},\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Point&quot;,\n    &quot;coordinates&quot;: [20.566406, 43.421008]\n  }\n};\n\n//=serbia\n\nvar saudiArabia = turf.flip(serbia);\n\n//=saudiArabia\n</code></pre>\n<p><strong>Returns</strong> <code>GeoJSON</code>, a GeoJSON object of the same type as input with flipped coordinates</p>\n"},{"name":"turf-hex-grid","example":"var bbox = [-96,31,-84,40];\nvar cellWidth = 50;\nvar units = 'miles';\n\nvar hexgrid = turf.hexGrid(bbox, cellWidth, units);\n\n//=hexgrid","desc":"<h3 id=\"-turf-hex-grid-bbox-cellwidth-units-\"><code>turf.hex-grid(bbox, cellWidth, units)</code></h3>\n<p>Takes a bounding box and a cell size in degrees and returns a FeatureCollection of flat-topped hexagons (Polygon features) aligned in an &quot;odd-q&quot; vertical grid asdescribed in Hexagonal Grids</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>bbox</code></td>\n<td>Array.\\<number\\></td>\n<td>bounding box in [minX, minY, maxX, maxY] order</td>\n</tr>\n<tr>\n<td><code>cellWidth</code></td>\n<td>Number</td>\n<td>width of cell in specified units</td>\n</tr>\n<tr>\n<td><code>units</code></td>\n<td>String</td>\n<td>used in calculating cellWidth (&#39;miles&#39; or &#39;kilometers&#39;)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var bbox = [-96,31,-84,40];\nvar cellWidth = 50;\nvar units = &#39;miles&#39;;\n\nvar hexgrid = turf.hexGrid(bbox, cellWidth, units);\n\n//=hexgrid\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, units used in calculating cellWidth (&#39;miles&#39; or &#39;kilometers&#39;)</p>\n"},{"name":"turf-inside","example":"var pt1 = {\n  \"type\": \"Feature\",\n  \"properties\": {\n    \"marker-color\": \"#f00\"\n  },\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [-111.467285, 40.75766]\n  }\n};\nvar pt2 = {\n  \"type\": \"Feature\",\n  \"properties\": {\n    \"marker-color\": \"#0f0\"\n  },\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [-111.873779, 40.647303]\n  }\n};\nvar poly = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Polygon\",\n    \"coordinates\": [[\n      [-112.074279, 40.52215],\n      [-112.074279, 40.853293],\n      [-111.610107, 40.853293],\n      [-111.610107, 40.52215],\n      [-112.074279, 40.52215]\n    ]]\n  }\n};\n\nvar features = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [pt1, pt2, poly]\n};\n\n//=features\n\nvar isInside1 = turf.inside(pt1, poly);\n//=isInside1\n\nvar isInside2 = turf.inside(pt2, poly);\n//=isInside2","desc":"<h3 id=\"-turf-inside-point-polygon-\"><code>turf.inside(point, polygon)</code></h3>\n<p>Takes a Point feature and a Polygon feature and determines if the Point resides inside the Polygon. The Polygon can be convex or concave. The function accepts any valid Polygon or MultiPolygonand accounts for holes.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>point</code></td>\n<td>Point</td>\n<td>a Point feature</td>\n</tr>\n<tr>\n<td><code>polygon</code></td>\n<td>Polygon</td>\n<td>a Polygon feature</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var pt1 = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {\n    &quot;marker-color&quot;: &quot;#f00&quot;\n  },\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Point&quot;,\n    &quot;coordinates&quot;: [-111.467285, 40.75766]\n  }\n};\nvar pt2 = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {\n    &quot;marker-color&quot;: &quot;#0f0&quot;\n  },\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Point&quot;,\n    &quot;coordinates&quot;: [-111.873779, 40.647303]\n  }\n};\nvar poly = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {},\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Polygon&quot;,\n    &quot;coordinates&quot;: [[\n      [-112.074279, 40.52215],\n      [-112.074279, 40.853293],\n      [-111.610107, 40.853293],\n      [-111.610107, 40.52215],\n      [-112.074279, 40.52215]\n    ]]\n  }\n};\n\nvar features = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [pt1, pt2, poly]\n};\n\n//=features\n\nvar isInside1 = turf.inside(pt1, poly);\n//=isInside1\n\nvar isInside2 = turf.inside(pt2, poly);\n//=isInside2\n</code></pre>\n<p><strong>Returns</strong> <code>Boolean</code>, true if the Point is inside the Polygon; false if the Point is not inside the Polygon</p>\n"},{"name":"turf-intersect","example":"var poly1 = turf.polygon([[\n [-122.801742, 45.48565],\n [-122.801742, 45.60491],\n [-122.584762, 45.60491],\n [-122.584762, 45.48565],\n [-122.801742, 45.48565]\n]]);\npoly1.properties.fill = '#0f0';\nvar poly2 = turf.polygon([[\n [-122.520217, 45.535693],\n [-122.64038, 45.553967],\n [-122.720031, 45.526554],\n [-122.669906, 45.507309],\n [-122.723464, 45.446643],\n [-122.532577, 45.408574],\n [-122.487258, 45.477466],\n [-122.520217, 45.535693]\n]]);\npoly2.properties.fill = '#00f';\nvar polygons = turf.featurecollection([poly1, poly2]);\n\nvar intersection = turf.intersect(poly1, poly2);\n\n//=polygons\n\n//=intersection","desc":"<h3 id=\"-turf-intersect-poly1-poly2-\"><code>turf.intersect(poly1, poly2)</code></h3>\n<p>Takes two Polygon features and finds their intersection.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>poly1</code></td>\n<td>Polygon</td>\n<td>the first Polygon</td>\n</tr>\n<tr>\n<td><code>poly2</code></td>\n<td>Polygon</td>\n<td>the second Polygon</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var poly1 = turf.polygon([[\n [-122.801742, 45.48565],\n [-122.801742, 45.60491],\n [-122.584762, 45.60491],\n [-122.584762, 45.48565],\n [-122.801742, 45.48565]\n]]);\npoly1.properties.fill = &#39;#0f0&#39;;\nvar poly2 = turf.polygon([[\n [-122.520217, 45.535693],\n [-122.64038, 45.553967],\n [-122.720031, 45.526554],\n [-122.669906, 45.507309],\n [-122.723464, 45.446643],\n [-122.532577, 45.408574],\n [-122.487258, 45.477466],\n [-122.520217, 45.535693]\n]]);\npoly2.properties.fill = &#39;#00f&#39;;\nvar polygons = turf.featurecollection([poly1, poly2]);\n\nvar intersection = turf.intersect(poly1, poly2);\n\n//=polygons\n\n//=intersection\n</code></pre>\n<p><strong>Returns</strong> <code>Polygon</code>, a Polygon feature representing the area where poly1 and poly2 overlap</p>\n"},{"name":"turf-isolines","example":"// create random points with random\n// z-values in their properties\nvar points = turf.random('point', 100, {\n  bbox: [0, 30, 20, 50]\n});\nfor (var i = 0; i < points.features.length; i++) {\n  points.features[i].properties.z = Math.random() * 10;\n}\nvar breaks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar isolined = turf.isolines(points, 'z', 15, breaks);\n//=isolined","desc":"<h3 id=\"-turf-isolines-points-z-resolution-breaks-\"><code>turf.isolines(points, z, resolution, breaks)</code></h3>\n<p>Takes a FeatureCollection of Point features with z-values and an array of value breaks and generates isolines.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>points</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Point features</td>\n</tr>\n<tr>\n<td><code>z</code></td>\n<td>string</td>\n<td>the property name in points from which z-values will be pulled</td>\n</tr>\n<tr>\n<td><code>resolution</code></td>\n<td>number</td>\n<td>resolution of the underlying grid</td>\n</tr>\n<tr>\n<td><code>breaks</code></td>\n<td>Array.\\<number\\></td>\n<td>where to draw contours</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">// create random points with random\n// z-values in their properties\nvar points = turf.random(&#39;point&#39;, 100, {\n  bbox: [0, 30, 20, 50]\n});\nfor (var i = 0; i &lt; points.features.length; i++) {\n  points.features[i].properties.z = Math.random() * 10;\n}\nvar breaks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nvar isolined = turf.isolines(points, &#39;z&#39;, 15, breaks);\n//=isolined\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, a FeatureCollection of LineString features representing isolines</p>\n"},{"name":"turf-jenks","example":"var points = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 200\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [49.859733, 40.400424]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 600\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [49.83879, 40.401209]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 100\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [49.817848, 40.376889]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 200\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [49.840507, 40.386043]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 300\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [49.854583, 40.37532]\n      }\n    }\n  ]\n};\n\nvar breaks = turf.jenks(points, 'population', 3);\n\n//=breaks","desc":"<h3 id=\"-turf-jenks-input-field-numberofbreaks-\"><code>turf.jenks(input, field, numberOfBreaks)</code></h3>\n<p>Takes a n of any type and returns an array of the Jenks Natural breaks for a given property</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>input</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of any type</td>\n</tr>\n<tr>\n<td><code>field</code></td>\n<td>string</td>\n<td>the property in input on which to calculate Jenks natural breaks</td>\n</tr>\n<tr>\n<td><code>numberOfBreaks</code></td>\n<td>number</td>\n<td>number of classes in which to group the data</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var points = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 200\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [49.859733, 40.400424]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 600\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [49.83879, 40.401209]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 100\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [49.817848, 40.376889]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 200\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [49.840507, 40.386043]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 300\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [49.854583, 40.37532]\n      }\n    }\n  ]\n};\n\nvar breaks = turf.jenks(points, &#39;population&#39;, 3);\n\n//=breaks\n</code></pre>\n<p><strong>Returns</strong> <code>Array.&lt;number&gt;</code>, the break number for each class plus the minimum and maximum values</p>\n"},{"name":"turf-kinks","example":"var poly = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Polygon\",\n    \"coordinates\": [[\n      [-12.034835, 8.901183],\n      [-12.060413, 8.899826],\n      [-12.03638, 8.873199],\n      [-12.059383, 8.871418],\n      [-12.034835, 8.901183]\n    ]]\n  }\n};\n\nvar kinks = turf.kinks(poly);\n\nvar resultFeatures = kinks.intersections.features.concat(poly);\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": resultFeatures\n};\n\n//=result","desc":"<h3 id=\"-turf-kinks-polygon-\"><code>turf.kinks(polygon)</code></h3>\n<p>Takes a Polygon feature and returns a FeatureCollection of Point features at all self-intersections.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>polygon</code></td>\n<td>Polygon</td>\n<td>a Polygon feature</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var poly = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {},\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Polygon&quot;,\n    &quot;coordinates&quot;: [[\n      [-12.034835, 8.901183],\n      [-12.060413, 8.899826],\n      [-12.03638, 8.873199],\n      [-12.059383, 8.871418],\n      [-12.034835, 8.901183]\n    ]]\n  }\n};\n\nvar kinks = turf.kinks(poly);\n\nvar resultFeatures = kinks.intersections.features.concat(poly);\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: resultFeatures\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, a FeatureCollection of Point features representing self-intersections</p>\n"},{"name":"turf-line-distance","example":"var line = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"LineString\",\n    \"coordinates\": [\n      [-77.031669, 38.878605],\n      [-77.029609, 38.881946],\n      [-77.020339, 38.884084],\n      [-77.025661, 38.885821],\n      [-77.021884, 38.889563],\n      [-77.019824, 38.892368]\n    ]\n  }\n};\n\nvar length = turf.lineDistance(line, 'miles');\n\n//=line\n\n//=length","desc":"<h3 id=\"-turf-line-distance-line-units-miles-\"><code>turf.line-distance(Line, [units=miles])</code></h3>\n<p>Takes a LineString feature and measures its length in the specified units.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Line</code></td>\n<td>LineString</td>\n<td>to measure</td>\n</tr>\n<tr>\n<td><code>[units=miles]</code></td>\n<td>String</td>\n<td><em>optional:</em> can be degrees, radians, miles, or kilometers</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var line = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {},\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;LineString&quot;,\n    &quot;coordinates&quot;: [\n      [-77.031669, 38.878605],\n      [-77.029609, 38.881946],\n      [-77.020339, 38.884084],\n      [-77.025661, 38.885821],\n      [-77.021884, 38.889563],\n      [-77.019824, 38.892368]\n    ]\n  }\n};\n\nvar length = turf.lineDistance(line, &#39;miles&#39;);\n\n//=line\n\n//=length\n</code></pre>\n<p><strong>Returns</strong> <code>Number</code>, length of the LineString</p>\n"},{"name":"turf-line-slice","example":"var line = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"LineString\",\n    \"coordinates\": [\n      [-77.031669, 38.878605],\n      [-77.029609, 38.881946],\n      [-77.020339, 38.884084],\n      [-77.025661, 38.885821],\n      [-77.021884, 38.889563],\n      [-77.019824, 38.892368]\n    ]\n  }\n};\nvar start = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [-77.029609, 38.881946]\n  }\n};\nvar stop = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [-77.021884, 38.889563]\n  }\n};\n\nvar sliced = turf.lineSlice(start, stop, line);\n\n//=line\n\n//=sliced","desc":"<h3 id=\"-turf-line-slice-point-point-line-\"><code>turf.line-slice (Point, Point, Line)</code></h3>\n<p>Slices a LineString at start and stop Points</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Point</code></td>\n<td>Point</td>\n<td>to start the slice</td>\n</tr>\n<tr>\n<td><code>Point</code></td>\n<td>Point</td>\n<td>to stop the slice</td>\n</tr>\n<tr>\n<td><code>Line</code></td>\n<td>LineString</td>\n<td>to slice</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var line = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {},\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;LineString&quot;,\n    &quot;coordinates&quot;: [\n      [-77.031669, 38.878605],\n      [-77.029609, 38.881946],\n      [-77.020339, 38.884084],\n      [-77.025661, 38.885821],\n      [-77.021884, 38.889563],\n      [-77.019824, 38.892368]\n    ]\n  }\n};\nvar start = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {},\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Point&quot;,\n    &quot;coordinates&quot;: [-77.029609, 38.881946]\n  }\n};\nvar stop = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {},\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Point&quot;,\n    &quot;coordinates&quot;: [-77.021884, 38.889563]\n  }\n};\n\nvar sliced = turf.lineSlice(start, stop, line);\n\n//=line\n\n//=sliced\n</code></pre>\n<p><strong>Returns</strong> <code>LineString</code>, Sliced LineString</p>\n"},{"name":"turf-linestring","example":"var linestring1 = turf.linestring([\n\t[-21.964416, 64.148203],\n\t[-21.956176, 64.141316],\n\t[-21.93901, 64.135924],\n\t[-21.927337, 64.136673]\n]);\nvar linestring2 = turf.linestring([\n\t[-21.929054, 64.127985],\n\t[-21.912918, 64.134726],\n\t[-21.916007, 64.141016],\n\t[-21.930084, 64.14446]\n], {name: 'line 1', distance: 145});\n\n//=linestring1\n\n//=linestring2","desc":"<h3 id=\"-turf-linestring-coordinates-properties-\"><code>turf.linestring(coordinates, properties)</code></h3>\n<p>Creates a LineString Feature based on a coordinate array. Properties can be added optionally.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>coordinates</code></td>\n<td>Array.\\<Array\\.\\<Number\\>></td>\n<td>an array of Positions</td>\n</tr>\n<tr>\n<td><code>properties</code></td>\n<td>Object</td>\n<td>an Object of key-value pairs to add as properties</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var linestring1 = turf.linestring([\n    [-21.964416, 64.148203],\n    [-21.956176, 64.141316],\n    [-21.93901, 64.135924],\n    [-21.927337, 64.136673]\n]);\nvar linestring2 = turf.linestring([\n    [-21.929054, 64.127985],\n    [-21.912918, 64.134726],\n    [-21.916007, 64.141016],\n    [-21.930084, 64.14446]\n], {name: &#39;line 1&#39;, distance: 145});\n\n//=linestring1\n\n//=linestring2\n</code></pre>\n<p><strong>Returns</strong> <code>LineString</code>, a LineString feature</p>\n"},{"name":"turf-max","example":"var polygons = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [101.551437, 3.150114],\n          [101.551437, 3.250208],\n          [101.742324, 3.250208],\n          [101.742324, 3.150114],\n          [101.551437, 3.150114]\n        ]]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [101.659927, 3.011612],\n          [101.659927, 3.143944],\n          [101.913986, 3.143944],\n          [101.913986, 3.011612],\n          [101.659927, 3.011612]\n        ]]\n      }\n    }\n  ]\n};\nvar points = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 200\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [101.56105, 3.213874]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 600\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [101.709365, 3.211817]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 100\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [101.645507, 3.169311]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 200\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [101.708679, 3.071266]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 300\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [101.826782, 3.081551]\n      }\n    }\n  ]\n};\n\nvar aggregated = turf.max(\n  polygons, points, 'population', 'max');\n\nvar resultFeatures = points.features.concat(\n  aggregated.features);\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": resultFeatures\n};\n\n//=result","desc":"<h3 id=\"-turf-max-polygons-points-infield-outfield-\"><code>turf.max(polygons, points, inField, outField)</code></h3>\n<p>Calculates the maximum value of a field for a set of Point features within a set of Polygon features.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>polygons</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Polygon features</td>\n</tr>\n<tr>\n<td><code>points</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Point features</td>\n</tr>\n<tr>\n<td><code>inField</code></td>\n<td>string</td>\n<td>the field in input data to analyze</td>\n</tr>\n<tr>\n<td><code>outField</code></td>\n<td>string</td>\n<td>the field in which to store results</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var polygons = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [101.551437, 3.150114],\n          [101.551437, 3.250208],\n          [101.742324, 3.250208],\n          [101.742324, 3.150114],\n          [101.551437, 3.150114]\n        ]]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [101.659927, 3.011612],\n          [101.659927, 3.143944],\n          [101.913986, 3.143944],\n          [101.913986, 3.011612],\n          [101.659927, 3.011612]\n        ]]\n      }\n    }\n  ]\n};\nvar points = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 200\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [101.56105, 3.213874]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 600\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [101.709365, 3.211817]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 100\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [101.645507, 3.169311]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 200\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [101.708679, 3.071266]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 300\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [101.826782, 3.081551]\n      }\n    }\n  ]\n};\n\nvar aggregated = turf.max(\n  polygons, points, &#39;population&#39;, &#39;max&#39;);\n\nvar resultFeatures = points.features.concat(\n  aggregated.features);\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: resultFeatures\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, a FeatureCollection of Polygon features with properties listed as outField values</p>\n"},{"name":"turf-median","example":"var polygons = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [18.400039, -33.970697],\n          [18.400039, -33.818518],\n          [18.665771, -33.818518],\n          [18.665771, -33.970697],\n          [18.400039, -33.970697]\n        ]]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [18.538742, -34.050383],\n          [18.538742, -33.98721],\n          [18.703536, -33.98721],\n          [18.703536, -34.050383],\n          [18.538742, -34.050383]\n        ]]\n      }\n    }\n  ]\n};\nvar points = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 200\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [18.514022, -33.860152]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 600\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [18.48999, -33.926269]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 100\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [18.583374, -33.905755]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 200\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [18.591613, -34.024778]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 300\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [18.653411, -34.017949]\n      }\n    }\n  ]\n};\n\nvar medians = turf.median(\n polygons, points, 'population', 'median');\n\nvar resultFeatures = points.features.concat(\n  medians.features);\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": resultFeatures\n};\n\n//=result","desc":"<h3 id=\"-turf-median-polygons-points-infield-outfield-\"><code>turf.median(polygons, points, inField, outField)</code></h3>\n<p>Calculates the median value of a field for a set of Point features within a set of Polygon features.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>polygons</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Polygon features</td>\n</tr>\n<tr>\n<td><code>points</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Point features</td>\n</tr>\n<tr>\n<td><code>inField</code></td>\n<td>string</td>\n<td>the field in input data to analyze</td>\n</tr>\n<tr>\n<td><code>outField</code></td>\n<td>string</td>\n<td>the field in which to store results</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var polygons = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [18.400039, -33.970697],\n          [18.400039, -33.818518],\n          [18.665771, -33.818518],\n          [18.665771, -33.970697],\n          [18.400039, -33.970697]\n        ]]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [18.538742, -34.050383],\n          [18.538742, -33.98721],\n          [18.703536, -33.98721],\n          [18.703536, -34.050383],\n          [18.538742, -34.050383]\n        ]]\n      }\n    }\n  ]\n};\nvar points = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 200\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [18.514022, -33.860152]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 600\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [18.48999, -33.926269]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 100\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [18.583374, -33.905755]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 200\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [18.591613, -34.024778]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 300\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [18.653411, -34.017949]\n      }\n    }\n  ]\n};\n\nvar medians = turf.median(\n polygons, points, &#39;population&#39;, &#39;median&#39;);\n\nvar resultFeatures = points.features.concat(\n  medians.features);\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: resultFeatures\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, a FeatureCollection of Polygon features with properties listed as outField values</p>\n"},{"name":"turf-merge","example":"var polygons = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"fill\": \"#0f0\"\n      },\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [9.994812, 53.549487],\n          [10.046997, 53.598209],\n          [10.117721, 53.531737],\n          [9.994812, 53.549487]\n        ]]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"fill\": \"#00f\"\n      },\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [10.000991, 53.50418],\n          [10.03807, 53.562539],\n          [9.926834, 53.551731],\n          [10.000991, 53.50418]\n        ]]\n      }\n    }\n  ]\n};\n\nvar merged = turf.merge(polygons);\n\n//=polygons\n\n//=merged","desc":"<h3 id=\"-turf-merge-fc-\"><code>turf.merge(fc)</code></h3>\n<p>Takes a FeatureCollection of Polygon features and returns a single merged polygon feature. If the input Polygon features are not contiguous, this function returns a MultiPolygon feature.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>fc</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Polygon features</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var polygons = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;fill&quot;: &quot;#0f0&quot;\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [9.994812, 53.549487],\n          [10.046997, 53.598209],\n          [10.117721, 53.531737],\n          [9.994812, 53.549487]\n        ]]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;fill&quot;: &quot;#00f&quot;\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [10.000991, 53.50418],\n          [10.03807, 53.562539],\n          [9.926834, 53.551731],\n          [10.000991, 53.50418]\n        ]]\n      }\n    }\n  ]\n};\n\nvar merged = turf.merge(polygons);\n\n//=polygons\n\n//=merged\n</code></pre>\n<p><strong>Returns</strong> <code>Feature</code>, a Polygon or MultiPolygon feature</p>\n"},{"name":"turf-midpoint","example":"var pt1 = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [144.834823, -37.771257]\n  }\n};\nvar pt2 = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [145.14244, -37.830937]\n  }\n};\n\nvar midpointed = turf.midpoint(pt1, pt2);\nmidpointed.properties['marker-color'] = '#f00';\n\n\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [pt1, pt2, midpointed]\n};\n\n//=result","desc":"<h3 id=\"-turf-midpoint-pt1-pt2-\"><code>turf.midpoint(pt1, pt2)</code></h3>\n<p>Takes two Point features and returns a Point midway between the two.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>pt1</code></td>\n<td>Point</td>\n<td>first point</td>\n</tr>\n<tr>\n<td><code>pt2</code></td>\n<td>Point</td>\n<td>second point</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var pt1 = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {},\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Point&quot;,\n    &quot;coordinates&quot;: [144.834823, -37.771257]\n  }\n};\nvar pt2 = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {},\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Point&quot;,\n    &quot;coordinates&quot;: [145.14244, -37.830937]\n  }\n};\n\nvar midpointed = turf.midpoint(pt1, pt2);\nmidpointed.properties[&#39;marker-color&#39;] = &#39;#f00&#39;;\n\n\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [pt1, pt2, midpointed]\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>Point</code>, a point between the two</p>\n"},{"name":"turf-min","example":"var polygons = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [72.809658, 18.961818],\n          [72.809658, 18.974805],\n          [72.827167, 18.974805],\n          [72.827167, 18.961818],\n          [72.809658, 18.961818]\n        ]]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [72.820987, 18.947043],\n          [72.820987, 18.95922],\n          [72.841243, 18.95922],\n          [72.841243, 18.947043],\n          [72.820987, 18.947043]\n        ]]\n      }\n    }\n  ]\n};\nvar points = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 200\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [72.814464, 18.971396]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 600\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [72.820043, 18.969772]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 100\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [72.817296, 18.964253]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 200\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [72.83575, 18.954837]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 300\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [72.828197, 18.95094]\n      }\n    }\n  ]\n};\n\nvar minimums = turf.min(\n  polygons, points, 'population', 'min');\n\nvar resultFeatures = points.features.concat(\n  minimums.features);\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": resultFeatures\n};\n\n//=result","desc":"<h3 id=\"-turf-min-polygons-points-infield-outfield-\"><code>turf.min(polygons, points, inField, outField)</code></h3>\n<p>Calculates the minimum value of a field for Point features within a set of Polygon features.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>polygons</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Polygon features</td>\n</tr>\n<tr>\n<td><code>points</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Point features</td>\n</tr>\n<tr>\n<td><code>inField</code></td>\n<td>string</td>\n<td>the field in input data to analyze</td>\n</tr>\n<tr>\n<td><code>outField</code></td>\n<td>string</td>\n<td>the field in which to store results</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var polygons = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [72.809658, 18.961818],\n          [72.809658, 18.974805],\n          [72.827167, 18.974805],\n          [72.827167, 18.961818],\n          [72.809658, 18.961818]\n        ]]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [72.820987, 18.947043],\n          [72.820987, 18.95922],\n          [72.841243, 18.95922],\n          [72.841243, 18.947043],\n          [72.820987, 18.947043]\n        ]]\n      }\n    }\n  ]\n};\nvar points = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 200\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [72.814464, 18.971396]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 600\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [72.820043, 18.969772]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 100\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [72.817296, 18.964253]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 200\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [72.83575, 18.954837]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 300\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [72.828197, 18.95094]\n      }\n    }\n  ]\n};\n\nvar minimums = turf.min(\n  polygons, points, &#39;population&#39;, &#39;min&#39;);\n\nvar resultFeatures = points.features.concat(\n  minimums.features);\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: resultFeatures\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, a FeatureCollection of Polygon features with properties listed as outField values</p>\n"},{"name":"turf-nearest","example":"var point = {\n  \"type\": \"Feature\",\n  \"properties\": {\n    \"marker-color\": \"#0f0\"\n  },\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [28.965797, 41.010086]\n  }\n};\nvar against = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [28.973865, 41.011122]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [28.948459, 41.024204]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [28.938674, 41.013324]\n      }\n    }\n  ]\n};\n\nvar nearest = turf.nearest(point, against);\nnearest.properties['marker-color'] = '#f00';\n\nvar resultFeatures = against.features.concat(point);\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": resultFeatures\n};\n\n//=result","desc":"<h3 id=\"-turf-nearest-point-against-\"><code>turf.nearest(point, against)</code></h3>\n<p>Takes a Point feature and a FeatureCollection of Point features and returns the Point feature from the FeatureCollection closest to the input point.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>point</code></td>\n<td>Point</td>\n<td>the reference point</td>\n</tr>\n<tr>\n<td><code>against</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Point features</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var point = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {\n    &quot;marker-color&quot;: &quot;#0f0&quot;\n  },\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Point&quot;,\n    &quot;coordinates&quot;: [28.965797, 41.010086]\n  }\n};\nvar against = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [28.973865, 41.011122]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [28.948459, 41.024204]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [28.938674, 41.013324]\n      }\n    }\n  ]\n};\n\nvar nearest = turf.nearest(point, against);\nnearest.properties[&#39;marker-color&#39;] = &#39;#f00&#39;;\n\nvar resultFeatures = against.features.concat(point);\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: resultFeatures\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>Feature</code>, the closest Point feature in against to point</p>\n"},{"name":"turf-planepoint","example":"var point = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [-75.3221, 39.529]\n  }\n};\nvar point = turf.point([-75.3221, 39.529]);\n// triangle is a polygon with \"a\", \"b\",\n// and \"c\" values representing\n// the values of the coordinates in order.\nvar triangle = {\n  \"type\": \"Feature\",\n  \"properties\": {\n    \"a\": 11,\n    \"b\": 122,\n    \"c\": 44\n  },\n  \"geometry\": {\n    \"type\": \"Polygon\",\n    \"coordinates\": [[\n      [-75.1221, 39.57],\n      [-75.58, 39.18],\n      [-75.97, 39.86],\n      [-75.1221, 39.57]\n    ]]\n  }\n};\n\nvar features = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [triangle, point]\n};\n\nvar zValue = turf.planepoint(point, triangle);\n\n//=features\n\n//=zValue","desc":"<h3 id=\"-turf-planepoint-interpolatedpoint-triangle-\"><code>turf.planepoint(interpolatedPoint, triangle)</code></h3>\n<p>Takes a triangular plane as a Polygon feature and a Point feature within that triangle and returns the z-valueat that point. The Polygon needs to have properties a, b, and cthat define the values at its three corners.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>interpolatedPoint</code></td>\n<td>Point</td>\n<td>the Point for which a z-value will be calculated</td>\n</tr>\n<tr>\n<td><code>triangle</code></td>\n<td>Polygon</td>\n<td>a Polygon feature with three vertices</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var point = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {},\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Point&quot;,\n    &quot;coordinates&quot;: [-75.3221, 39.529]\n  }\n};\nvar point = turf.point([-75.3221, 39.529]);\n// triangle is a polygon with &quot;a&quot;, &quot;b&quot;,\n// and &quot;c&quot; values representing\n// the values of the coordinates in order.\nvar triangle = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {\n    &quot;a&quot;: 11,\n    &quot;b&quot;: 122,\n    &quot;c&quot;: 44\n  },\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Polygon&quot;,\n    &quot;coordinates&quot;: [[\n      [-75.1221, 39.57],\n      [-75.58, 39.18],\n      [-75.97, 39.86],\n      [-75.1221, 39.57]\n    ]]\n  }\n};\n\nvar features = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [triangle, point]\n};\n\nvar zValue = turf.planepoint(point, triangle);\n\n//=features\n\n//=zValue\n</code></pre>\n<p><strong>Returns</strong> <code>number</code>, the z-value for interpolatedPoint</p>\n"},{"name":"turf-point","example":"var pt1 = turf.point([-75.343, 39.984]);\n\n//=pt1","desc":"<h3 id=\"-turf-point-longitude-latitude-properties-\"><code>turf.point(longitude, latitude, properties)</code></h3>\n<p>Takes coordinates and properties (optional) and returns a new Point feature.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>longitude</code></td>\n<td>number</td>\n<td>position west to east in decimal degrees</td>\n</tr>\n<tr>\n<td><code>latitude</code></td>\n<td>number</td>\n<td>position south to north in decimal degrees</td>\n</tr>\n<tr>\n<td><code>properties</code></td>\n<td>Object</td>\n<td>an Object that is used as the Feature&#39;s properties</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var pt1 = turf.point([-75.343, 39.984]);\n\n//=pt1\n</code></pre>\n<p><strong>Returns</strong> <code>Point</code>, a Point feature</p>\n"},{"name":"turf-point-grid","example":"var extent = [-70.823364, -33.553984, -70.473175, -33.302986];\nvar depth = 10;\n\nvar grid = turf.pointGrid(extent, depth);\n\n//=grid","desc":"<h3 id=\"-turf-point-grid-extent-depth-\"><code>turf.point-grid(extent, depth)</code></h3>\n<p>Takes a bounding box and a cell depth and returns a FeatureCollection of Point features in a grid.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>extent</code></td>\n<td>Array.\\<number\\></td>\n<td>extent in [minX, minY, maxX, maxY] order</td>\n</tr>\n<tr>\n<td><code>depth</code></td>\n<td>Number</td>\n<td>how many cells to output</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var extent = [-70.823364, -33.553984, -70.473175, -33.302986];\nvar depth = 10;\n\nvar grid = turf.pointGrid(extent, depth);\n\n//=grid\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, grid as FeatureCollection with Point features</p>\n"},{"name":"turf-point-on-line","example":"var line = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"LineString\",\n    \"coordinates\": [\n      [-77.031669, 38.878605],\n      [-77.029609, 38.881946],\n      [-77.020339, 38.884084],\n      [-77.025661, 38.885821],\n      [-77.021884, 38.889563],\n      [-77.019824, 38.892368]\n    ]\n  }\n};\nvar pt = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Point\",\n    \"coordinates\": [-77.037076, 38.884017]\n  }\n};\n\nvar snapped = turf.pointOnLine(line, pt);\nsnapped.properties['marker-color'] = '#00f'\n\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [line, pt, snapped]\n};\n\n//=result","desc":"<h3 id=\"-turf-point-on-line-line-point-\"><code>turf.point-on-line (Line, Point)</code></h3>\n<p>Takes a Point and a LineString and calculates the closest Point on the LineString</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Line</code></td>\n<td>LineString</td>\n<td>to snap to</td>\n</tr>\n<tr>\n<td><code>Point</code></td>\n<td>Point</td>\n<td>to snap from</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var line = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {},\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;LineString&quot;,\n    &quot;coordinates&quot;: [\n      [-77.031669, 38.878605],\n      [-77.029609, 38.881946],\n      [-77.020339, 38.884084],\n      [-77.025661, 38.885821],\n      [-77.021884, 38.889563],\n      [-77.019824, 38.892368]\n    ]\n  }\n};\nvar pt = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {},\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Point&quot;,\n    &quot;coordinates&quot;: [-77.037076, 38.884017]\n  }\n};\n\nvar snapped = turf.pointOnLine(line, pt);\nsnapped.properties[&#39;marker-color&#39;] = &#39;#00f&#39;\n\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [line, pt, snapped]\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>Point</code>, Closest Point on the Line</p>\n"},{"name":"turf-point-on-surface","example":"// create a random polygon\nvar polygon = turf.random('polygon');\n\n//=polygon\n\nvar pointOnPolygon = turf.pointOnSurface(polygon);\n\nvar resultFeatures = polygon.features.concat(pointOnPolygon);\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": resultFeatures\n};\n\n//=result","desc":"<h3 id=\"-turf-point-on-surface-input-\"><code>turf.point-on-surface(input)</code></h3>\n<p>Finds a Point guaranteed to be on the surface of GeoJSON object.\nGiven a Polygon, the point will be in the area of the polygon\nGiven a LineString, the point will be along the string\nGiven a Point, the point will the same as the input</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>input</code></td>\n<td>GeoJSON</td>\n<td>any GeoJSON object</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">// create a random polygon\nvar polygon = turf.random(&#39;polygon&#39;);\n\n//=polygon\n\nvar pointOnPolygon = turf.pointOnSurface(polygon);\n\nvar resultFeatures = polygon.features.concat(pointOnPolygon);\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: resultFeatures\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>Feature</code>, a point on the surface of input</p>\n"},{"name":"turf-polygon","example":"var polygon = turf.polygon([[\n [-2.275543, 53.464547],\n [-2.275543, 53.489271],\n [-2.215118, 53.489271],\n [-2.215118, 53.464547],\n [-2.275543, 53.464547]\n]], { name: 'poly1', population: 400});\n\n//=polygon","desc":"<h3 id=\"-turf-polygon-rings-properties-\"><code>turf.polygon(rings, properties)</code></h3>\n<p>Takes an array of LinearRings and optionally an Object with properties and returns a GeoJSON Polygon feature.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>rings</code></td>\n<td>Array.\\<Array\\.\\<Number\\>></td>\n<td>an array of LinearRings</td>\n</tr>\n<tr>\n<td><code>properties</code></td>\n<td>Object</td>\n<td>an optional properties object</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var polygon = turf.polygon([[\n [-2.275543, 53.464547],\n [-2.275543, 53.489271],\n [-2.215118, 53.489271],\n [-2.215118, 53.464547],\n [-2.275543, 53.464547]\n]], { name: &#39;poly1&#39;, population: 400});\n\n//=polygon\n</code></pre>\n<p><strong>Returns</strong> <code>Polygon</code>, a Polygon feature</p>\n"},{"name":"turf-quantile","example":"var points = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 5\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [5, 5]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 40\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [1, 3]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 80\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [14, 2]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 90\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [13, 1]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 100\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [19, 7]\n      }\n    }\n  ]\n};\n\nvar breaks = turf.quantile(\n  points, 'population', [25, 50, 75, 99]);\n\n//=breaks","desc":"<h3 id=\"-turf-quantile-input-field-percentiles-\"><code>turf.quantile(input, field, percentiles)</code></h3>\n<p>Takes a FeatureCollection, a property name, and a set of percentiles and returns a quantile array.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>input</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of any type</td>\n</tr>\n<tr>\n<td><code>field</code></td>\n<td>String</td>\n<td>the property in input from which to retrieve quantile values</td>\n</tr>\n<tr>\n<td><code>percentiles</code></td>\n<td>Array.\\<number\\></td>\n<td>an Array of percentiles on which to calculate quantile values</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var points = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 5\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [5, 5]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 40\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [1, 3]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 80\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [14, 2]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 90\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [13, 1]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 100\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [19, 7]\n      }\n    }\n  ]\n};\n\nvar breaks = turf.quantile(\n  points, &#39;population&#39;, [25, 50, 75, 99]);\n\n//=breaks\n</code></pre>\n<p><strong>Returns</strong> <code>Array.&lt;number&gt;</code>, an array of the break values</p>\n"},{"name":"turf-random","example":"var points = turf.random('points', 100, {\n  bbox: [-70, 40, -60, 60]\n});\n\n//=points\n\nvar polygons = turf.random('polygons', 4, {\n  bbox: [-70, 40, -60, 60]\n});\n\n//=polygons","desc":"<h3 id=\"-turf-random-type-point-count-1-options-options-bbox-options-num_vertices-10-options-max_radial_length-10-\"><code>turf.random([type=&#39;point&#39;], [count=1], options, options.bbox, [options.num_vertices=10], [options.max_radial_length=10])</code></h3>\n<p>Generates random GeoJSON data, including Point|Points and Polygon|Polygons, for testing and experimentation.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>[type=&#39;point&#39;]</code></td>\n<td>String</td>\n<td><em>optional:</em> type of features desired: &#39;points&#39; or &#39;polygons&#39;</td>\n</tr>\n<tr>\n<td><code>[count=1]</code></td>\n<td>Number</td>\n<td><em>optional:</em> how many geometries should be generated.</td>\n</tr>\n<tr>\n<td><code>options</code></td>\n<td>Object</td>\n<td>options relevant to the feature desired. Can include:</td>\n</tr>\n<tr>\n<td><code>options.bbox</code></td>\n<td>Array.\\<number\\></td>\n<td>a bounding box inside of which geometries are placed. In the case of Point features, they are guaranteed to be within this bounds, while Polygon features have their centroid within the bounds.</td>\n</tr>\n<tr>\n<td><code>[options.num_vertices=10]</code></td>\n<td>Number</td>\n<td><em>optional:</em> options.vertices the number of vertices added to polygon features.</td>\n</tr>\n<tr>\n<td><code>[options.max_radial_length=10]</code></td>\n<td>Number</td>\n<td><em>optional:</em> the total number of decimal degrees longitude or latitude that a polygon can extent outwards to from its center.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var points = turf.random(&#39;points&#39;, 100, {\n  bbox: [-70, 40, -60, 60]\n});\n\n//=points\n\nvar polygons = turf.random(&#39;polygons&#39;, 4, {\n  bbox: [-70, 40, -60, 60]\n});\n\n//=polygons\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, generated random features</p>\n"},{"name":"turf-reclass","example":"var points = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 200\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [13.170547, 32.888669]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 600\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [13.182048, 32.889533]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 100\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [13.17398, 32.882182]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 200\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [13.174324, 32.895011]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 300\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [13.185825, 32.884344]\n      }\n    }\n  ]\n};\n// 0 to 200 will map to \"small\", 200 to 400 will map to \"medium\", 400 to 600 will map to \"large\"\nvar translations = [\n  [0, 200, \"small\"],\n  [200, 400, \"medium\"],\n  [400, 600, \"large\"]\n];\n\nvar reclassed = turf.reclass(\n  points, 'population', 'size', translations);\n\n//=reclassed","desc":"<h3 id=\"-turf-reclass-input-infield-outfield-translations-\"><code>turf.reclass(input, inField, outField, translations)</code></h3>\n<p>Takes a FeatureCollection, an input field, an output field, and an array of translations and outputs an identical FeatureCollection withthe output field property populated.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>input</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of any type</td>\n</tr>\n<tr>\n<td><code>inField</code></td>\n<td>string</td>\n<td>the field to translate</td>\n</tr>\n<tr>\n<td><code>outField</code></td>\n<td>string</td>\n<td>the field in which to store translated results</td>\n</tr>\n<tr>\n<td><code>translations</code></td>\n<td>Array.\\<number\\></td>\n<td>an array of translations</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var points = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 200\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [13.170547, 32.888669]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 600\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [13.182048, 32.889533]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 100\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [13.17398, 32.882182]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 200\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [13.174324, 32.895011]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 300\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [13.185825, 32.884344]\n      }\n    }\n  ]\n};\n// 0 to 200 will map to &quot;small&quot;, 200 to 400 will map to &quot;medium&quot;, 400 to 600 will map to &quot;large&quot;\nvar translations = [\n  [0, 200, &quot;small&quot;],\n  [200, 400, &quot;medium&quot;],\n  [400, 600, &quot;large&quot;]\n];\n\nvar reclassed = turf.reclass(\n  points, &#39;population&#39;, &#39;size&#39;, translations);\n\n//=reclassed\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, a FeatureCollection with identical geometries to input but with outField populated.</p>\n"},{"name":"turf-remove","example":"var points = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        'marker-color': '#00f'\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-0.235004, 5.551918]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        'marker-color': '#f00'\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-0.209598, 5.56439]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        'marker-color': '#00f'\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-0.197753, 5.556018]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        'marker-color': '#000'\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-0.217323, 5.549526]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        'marker-color': '#0f0'\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-0.211315, 5.543887]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        'marker-color': '#00f'\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-0.202217, 5.547134]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        'marker-color': '#0f0'\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-0.231227, 5.56644]\n      }\n    }\n  ]\n};\n\n//=points\n\nvar filtered = turf.remove(points, 'marker-color', '#00f');\n\n//=filtered","desc":"<h3 id=\"-turf-remove-features-property-value-\"><code>turf.remove(features, property, value)</code></h3>\n<p>Takes a FeatureCollection of any type, a property, and a value and returns a FeatureCollection with features matching thatproperty-value pair removed.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>features</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of any type</td>\n</tr>\n<tr>\n<td><code>property</code></td>\n<td>String</td>\n<td>the property to filter</td>\n</tr>\n<tr>\n<td><code>value</code></td>\n<td>String</td>\n<td>the value to filter</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var points = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &#39;marker-color&#39;: &#39;#00f&#39;\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-0.235004, 5.551918]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &#39;marker-color&#39;: &#39;#f00&#39;\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-0.209598, 5.56439]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &#39;marker-color&#39;: &#39;#00f&#39;\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-0.197753, 5.556018]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &#39;marker-color&#39;: &#39;#000&#39;\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-0.217323, 5.549526]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &#39;marker-color&#39;: &#39;#0f0&#39;\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-0.211315, 5.543887]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &#39;marker-color&#39;: &#39;#00f&#39;\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-0.202217, 5.547134]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &#39;marker-color&#39;: &#39;#0f0&#39;\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-0.231227, 5.56644]\n      }\n    }\n  ]\n};\n\n//=points\n\nvar filtered = turf.remove(points, &#39;marker-color&#39;, &#39;#00f&#39;);\n\n//=filtered\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, the resulting FeatureCollection without features that match the property-value pair</p>\n"},{"name":"turf-sample","example":"var points = turf.random('points', 1000);\n\n//=points\n\nvar sample = turf.sample(points, 10);\n\n//=sample","desc":"<h3 id=\"-turf-sample-features-n-\"><code>turf.sample(features, n)</code></h3>\n<p>Takes a FeatureCollection and returns a FeatureCollection with given number of Feature|features at random.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>features</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of any type</td>\n</tr>\n<tr>\n<td><code>n</code></td>\n<td>number</td>\n<td>number of features to select</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var points = turf.random(&#39;points&#39;, 1000);\n\n//=points\n\nvar sample = turf.sample(points, 10);\n\n//=sample\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, a FeatureCollection with n features</p>\n"},{"name":"turf-simplify","example":"var feature = {\n  \"type\": \"Feature\",\n  \"properties\": {},\n  \"geometry\": {\n    \"type\": \"Polygon\",\n    \"coordinates\": [[\n      [-70.603637, -33.399918],\n      [-70.614624, -33.395332],\n      [-70.639343, -33.392466],\n      [-70.659942, -33.394759],\n      [-70.683975, -33.404504],\n      [-70.697021, -33.419406],\n      [-70.701141, -33.434306],\n      [-70.700454, -33.446339],\n      [-70.694274, -33.458369],\n      [-70.682601, -33.465816],\n      [-70.668869, -33.472117],\n      [-70.646209, -33.473835],\n      [-70.624923, -33.472117],\n      [-70.609817, -33.468107],\n      [-70.595397, -33.458369],\n      [-70.587158, -33.442901],\n      [-70.587158, -33.426283],\n      [-70.590591, -33.414248],\n      [-70.594711, -33.406224],\n      [-70.603637, -33.399918]\n    ]]\n  }\n};\n\nvar tolerance = 0.01;\n\nvar simplified = turf.simplify(\n feature, tolerance, false);\n\n//=feature\n\n//=simplified","desc":"<h3 id=\"-turf-simplify-feature-tolerance-highquality-\"><code>turf.simplify(feature, tolerance, highQuality)</code></h3>\n<p>Takes a LineString or Polygon feature and returns a simplified version. Internally uses simplify-js to perform simplification.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>feature</code></td>\n<td>Feature</td>\n<td>a LineString or Polygon feature to be simplified</td>\n</tr>\n<tr>\n<td><code>tolerance</code></td>\n<td>number</td>\n<td>simplification tolerance</td>\n</tr>\n<tr>\n<td><code>highQuality</code></td>\n<td>boolean</td>\n<td>whether or not to spend more time to create a higher-quality simplification with a different algorithm</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var feature = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {},\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Polygon&quot;,\n    &quot;coordinates&quot;: [[\n      [-70.603637, -33.399918],\n      [-70.614624, -33.395332],\n      [-70.639343, -33.392466],\n      [-70.659942, -33.394759],\n      [-70.683975, -33.404504],\n      [-70.697021, -33.419406],\n      [-70.701141, -33.434306],\n      [-70.700454, -33.446339],\n      [-70.694274, -33.458369],\n      [-70.682601, -33.465816],\n      [-70.668869, -33.472117],\n      [-70.646209, -33.473835],\n      [-70.624923, -33.472117],\n      [-70.609817, -33.468107],\n      [-70.595397, -33.458369],\n      [-70.587158, -33.442901],\n      [-70.587158, -33.426283],\n      [-70.590591, -33.414248],\n      [-70.594711, -33.406224],\n      [-70.603637, -33.399918]\n    ]]\n  }\n};\n\nvar tolerance = 0.01;\n\nvar simplified = turf.simplify(\n feature, tolerance, false);\n\n//=feature\n\n//=simplified\n</code></pre>\n<p><strong>Returns</strong> <code>Feature</code>, a simplified feature</p>\n"},{"name":"turf-size","example":"var bbox = [0, 0, 10, 10]\n\nvar resized = turf.size(bbox, 2);\n\nvar features = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    turf.bboxPolygon(bbox),\n    turf.bboxPolygon(resized)\n  ]\n};\n\n//=features","desc":"<h3 id=\"-turf-size-bbox-factor-\"><code>turf.size(bbox, factor)</code></h3>\n<p>Takes a bounding box and returns a new bounding box with a size expanded or contracted by a factor of X.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>bbox</code></td>\n<td>Array.\\<number\\></td>\n<td>a bounding box</td>\n</tr>\n<tr>\n<td><code>factor</code></td>\n<td>number</td>\n<td>the ratio of the new bbox to the input bbox</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var bbox = [0, 0, 10, 10]\n\nvar resized = turf.size(bbox, 2);\n\nvar features = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    turf.bboxPolygon(bbox),\n    turf.bboxPolygon(resized)\n  ]\n};\n\n//=features\n</code></pre>\n<p><strong>Returns</strong> <code>Array.&lt;number&gt;</code>, the resized bbox</p>\n"},{"name":"turf-square","example":"var bbox = [-20,-20,-15,0];\n\nvar squared = turf.square(bbox);\n\nvar features = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    turf.bboxPolygon(bbox),\n    turf.bboxPolygon(squared)\n  ]\n};\n\n//=features","desc":"<h3 id=\"-turf-square-bbox-\"><code>turf.square(bbox)</code></h3>\n<p>Takes a bounding box and calculates the minimum square bounding box that would contain the input.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>bbox</code></td>\n<td>Array.\\<number\\></td>\n<td>a bounding box</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var bbox = [-20,-20,-15,0];\n\nvar squared = turf.square(bbox);\n\nvar features = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    turf.bboxPolygon(bbox),\n    turf.bboxPolygon(squared)\n  ]\n};\n\n//=features\n</code></pre>\n<p><strong>Returns</strong> <code>Array.&lt;number&gt;</code>, a square surrounding bbox</p>\n"},{"name":"turf-square-grid","example":"var extent = [-77.3876953125,38.71980474264239,-76.9482421875,39.027718840211605];\nvar cellWidth = 10;\nvar units = 'miles';\n\nvar squareGrid = turf.squareGrid(extent, cellWidth, units);\n\n//=squareGrid","desc":"<h3 id=\"-turf-square-grid-extent-cellwidth-units-\"><code>turf.square-grid(extent, cellWidth, units)</code></h3>\n<p>Takes a bounding box and a cell depth and returns a FeatureCollection of Polygon features in a grid.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>extent</code></td>\n<td>Array.\\<number\\></td>\n<td>extent in [minX, minY, maxX, maxY] order</td>\n</tr>\n<tr>\n<td><code>cellWidth</code></td>\n<td>Number</td>\n<td>width of each cell</td>\n</tr>\n<tr>\n<td><code>units</code></td>\n<td>String</td>\n<td>units to use for cellWidth</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var extent = [-77.3876953125,38.71980474264239,-76.9482421875,39.027718840211605];\nvar cellWidth = 10;\nvar units = &#39;miles&#39;;\n\nvar squareGrid = turf.squareGrid(extent, cellWidth, units);\n\n//=squareGrid\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, grid as FeatureCollection with Polygon features</p>\n"},{"name":"turf-sum","example":"var polygons = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [-87.990188, 43.026486],\n          [-87.990188, 43.062115],\n          [-87.913284, 43.062115],\n          [-87.913284, 43.026486],\n          [-87.990188, 43.026486]\n        ]]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [-87.973709, 42.962452],\n          [-87.973709, 43.014689],\n          [-87.904014, 43.014689],\n          [-87.904014, 42.962452],\n          [-87.973709, 42.962452]\n        ]]\n      }\n    }\n  ]\n};\nvar points = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 200\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-87.974052, 43.049321]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 600\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-87.957229, 43.037277]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 100\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-87.931137, 43.048568]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 200\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-87.963409, 42.99611]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 300\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-87.94178, 42.974762]\n      }\n    }\n  ]\n};\n\nvar aggregated = turf.sum(\n  polygons, points, 'population', 'sum');\n\nvar resultFeatures = points.features.concat(\n  aggregated.features);\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": resultFeatures\n};\n\n//=result","desc":"<h3 id=\"-turf-sum-polygons-points-infield-outfield-\"><code>turf.sum(polygons, points, inField, outField)</code></h3>\n<p>Calculates the sum of a field for Point features within a set of Polygon features.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>polygons</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Polygon features</td>\n</tr>\n<tr>\n<td><code>points</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Point features</td>\n</tr>\n<tr>\n<td><code>inField</code></td>\n<td>String</td>\n<td>the field in input data to analyze</td>\n</tr>\n<tr>\n<td><code>outField</code></td>\n<td>String</td>\n<td>the field in which to store results</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var polygons = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [-87.990188, 43.026486],\n          [-87.990188, 43.062115],\n          [-87.913284, 43.062115],\n          [-87.913284, 43.026486],\n          [-87.990188, 43.026486]\n        ]]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [-87.973709, 42.962452],\n          [-87.973709, 43.014689],\n          [-87.904014, 43.014689],\n          [-87.904014, 42.962452],\n          [-87.973709, 42.962452]\n        ]]\n      }\n    }\n  ]\n};\nvar points = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 200\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-87.974052, 43.049321]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 600\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-87.957229, 43.037277]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 100\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-87.931137, 43.048568]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 200\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-87.963409, 42.99611]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 300\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-87.94178, 42.974762]\n      }\n    }\n  ]\n};\n\nvar aggregated = turf.sum(\n  polygons, points, &#39;population&#39;, &#39;sum&#39;);\n\nvar resultFeatures = points.features.concat(\n  aggregated.features);\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: resultFeatures\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, a FeatureCollection of Polygon features with properties listed as outField</p>\n"},{"name":"turf-tag","example":"var bbox = [0, 0, 50, 50];\n// create a triangular grid of polygons\nvar triangleGrid = turf.tin(turf.grid(bbox, 10));\ntriangleGrid.features.forEach(function(f) {\n  f.properties.fill = '#' +\n    (~~(Math.random() * 16)).toString(16) +\n    (~~(Math.random() * 16)).toString(16) +\n    (~~(Math.random() * 16)).toString(16);\n  f.properties.stroke = 0;\n  f.properties['fill-opacity'] = 1;\n});\nvar randomPoints = turf.random('point', 30, {\n  bbox: bbox\n});\nvar both = turf.featurecollection(\n  triangleGrid.features.concat(randomPoints.features));\n\n//=both\n\nvar tagged = turf.tag(randomPoints, triangleGrid,\n                      'fill', 'marker-color');\n\n//=tagged","desc":"<h3 id=\"-turf-tag-points-polygons-polyid-containingpolyid-\"><code>turf.tag(points, polygons, polyId, containingPolyId)</code></h3>\n<p>Takes a FeatureCollection of Point features and a FeatureCollection of Polygon features and performs a spatial join.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>points</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Point features</td>\n</tr>\n<tr>\n<td><code>polygons</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Polygon features</td>\n</tr>\n<tr>\n<td><code>polyId</code></td>\n<td>String</td>\n<td>property in polygons to add to joined Point features</td>\n</tr>\n<tr>\n<td><code>containingPolyId</code></td>\n<td>String</td>\n<td>property in points in which to store joined property from `polygons</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var bbox = [0, 0, 50, 50];\n// create a triangular grid of polygons\nvar triangleGrid = turf.tin(turf.grid(bbox, 10));\ntriangleGrid.features.forEach(function(f) {\n  f.properties.fill = &#39;#&#39; +\n    (~~(Math.random() * 16)).toString(16) +\n    (~~(Math.random() * 16)).toString(16) +\n    (~~(Math.random() * 16)).toString(16);\n  f.properties.stroke = 0;\n  f.properties[&#39;fill-opacity&#39;] = 1;\n});\nvar randomPoints = turf.random(&#39;point&#39;, 30, {\n  bbox: bbox\n});\nvar both = turf.featurecollection(\n  triangleGrid.features.concat(randomPoints.features));\n\n//=both\n\nvar tagged = turf.tag(randomPoints, triangleGrid,\n                      &#39;fill&#39;, &#39;marker-color&#39;);\n\n//=tagged\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, a FeatureCollection of point features</p>\n"},{"name":"turf-tin","example":"// generate some random point data\nvar points = turf.random('points', 30, {\n  bbox: [50, 30, 70, 50]\n});\n//=points\n// add a random property to each point between 0 and 9\nfor (var i = 0; i < points.features.length; i++) {\n  points.features[i].properties.z = ~~(Math.random() * 9);\n}\nvar tin = turf.tin(points, 'z')\nfor (var i = 0; i < tin.features.length; i++) {\n  var properties  = tin.features[i].properties;\n  // roughly turn the properties of each\n  // triangle into a fill color\n  // so we can visualize the result\n  properties.fill = '#' + properties.a +\n    properties.b + properties.c;\n}\n//=tin","desc":"<h3 id=\"-turf-tin-points-propertyname-\"><code>turf.tin(points, propertyName)</code></h3>\n<p>Takes a set of points and the name of a z-value property and creates a Triangulated Irregular Network,or a TIN for short, returned as a collection of Polygons. These are often usedfor developing elevation contour maps or stepped heat visualizations.This triangulates the points, as well as adds properties called a, b,and c representing the value of the given propertyName at each ofthe points that represent the corners of the triangle.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>points</code></td>\n<td>FeatureCollection</td>\n</tr>\n</tbody>\n</table>\n<p>a GeoJSON FeatureCollection containing Features with Point geometries</p>\n<pre><code>                                                                                      |\n</code></pre><p>| <code>propertyName</code> | string            | <em>optional:</em> \nname of the property from which to pull z values. This is optional: if not given, then there will be no extra data added to the derived triangles.</p>\n<p> |</p>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">// generate some random point data\nvar points = turf.random(&#39;points&#39;, 30, {\n  bbox: [50, 30, 70, 50]\n});\n//=points\n// add a random property to each point between 0 and 9\nfor (var i = 0; i &lt; points.features.length; i++) {\n  points.features[i].properties.z = ~~(Math.random() * 9);\n}\nvar tin = turf.tin(points, &#39;z&#39;)\nfor (var i = 0; i &lt; tin.features.length; i++) {\n  var properties  = tin.features[i].properties;\n  // roughly turn the properties of each\n  // triangle into a fill color\n  // so we can visualize the result\n  properties.fill = &#39;#&#39; + properties.a +\n    properties.b + properties.c;\n}\n//=tin\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, TIN output</p>\n"},{"name":"turf-triangle-grid","example":"var extent = [-77.3876953125,38.71980474264239,-76.9482421875,39.027718840211605];\nvar cellWidth = 10;\nvar units = 'miles';\n\nvar triangleGrid = turf.triangleGrid(extent, cellWidth, units);\n\n//=triangleGrid","desc":"<h3 id=\"-turf-triangle-grid-extent-cellwidth-units-\"><code>turf.triangle-grid(extent, cellWidth, units)</code></h3>\n<p>Takes a bounding box and a cell depth and returns a FeatureCollection of Polygon features in a grid.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>extent</code></td>\n<td>Array.\\<number\\></td>\n<td>extent in [minX, minY, maxX, maxY] order</td>\n</tr>\n<tr>\n<td><code>cellWidth</code></td>\n<td>Number</td>\n<td>width of each cell</td>\n</tr>\n<tr>\n<td><code>units</code></td>\n<td>String</td>\n<td>units to use for cellWidth</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var extent = [-77.3876953125,38.71980474264239,-76.9482421875,39.027718840211605];\nvar cellWidth = 10;\nvar units = &#39;miles&#39;;\n\nvar triangleGrid = turf.triangleGrid(extent, cellWidth, units);\n\n//=triangleGrid\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, grid as FeatureCollection with Polygon features</p>\n"},{"name":"turf-union","example":"var poly1 = {\n  \"type\": \"Feature\",\n  \"properties\": {\n    \"fill\": \"#0f0\"\n  },\n  \"geometry\": {\n    \"type\": \"Polygon\",\n    \"coordinates\": [[\n      [-82.574787, 35.594087],\n      [-82.574787, 35.615581],\n      [-82.545261, 35.615581],\n      [-82.545261, 35.594087],\n      [-82.574787, 35.594087]\n    ]]\n  }\n};\nvar poly2 = {\n  \"type\": \"Feature\",\n  \"properties\": {\n    \"fill\": \"#00f\"\n  },\n  \"geometry\": {\n    \"type\": \"Polygon\",\n    \"coordinates\": [[\n      [-82.560024, 35.585153],\n      [-82.560024, 35.602602],\n      [-82.52964, 35.602602],\n      [-82.52964, 35.585153],\n      [-82.560024, 35.585153]\n    ]]\n  }\n};\nvar polygons = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [poly1, poly2]\n};\n\nvar union = turf.union(poly1, poly2);\n\n//=polygons\n\n//=union","desc":"<h3 id=\"-turf-union-poly1-poly2-\"><code>turf.union(poly1, poly2)</code></h3>\n<p>Takes two Polygon features and returnes a combined Polygon feature. If the input Polygon features are not contiguous, this function returns a MultiPolygon feature.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>poly1</code></td>\n<td>Polygon</td>\n<td>an input Polygon</td>\n</tr>\n<tr>\n<td><code>poly2</code></td>\n<td>Polygon</td>\n<td>another input Polygon</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var poly1 = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {\n    &quot;fill&quot;: &quot;#0f0&quot;\n  },\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Polygon&quot;,\n    &quot;coordinates&quot;: [[\n      [-82.574787, 35.594087],\n      [-82.574787, 35.615581],\n      [-82.545261, 35.615581],\n      [-82.545261, 35.594087],\n      [-82.574787, 35.594087]\n    ]]\n  }\n};\nvar poly2 = {\n  &quot;type&quot;: &quot;Feature&quot;,\n  &quot;properties&quot;: {\n    &quot;fill&quot;: &quot;#00f&quot;\n  },\n  &quot;geometry&quot;: {\n    &quot;type&quot;: &quot;Polygon&quot;,\n    &quot;coordinates&quot;: [[\n      [-82.560024, 35.585153],\n      [-82.560024, 35.602602],\n      [-82.52964, 35.602602],\n      [-82.52964, 35.585153],\n      [-82.560024, 35.585153]\n    ]]\n  }\n};\nvar polygons = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [poly1, poly2]\n};\n\nvar union = turf.union(poly1, poly2);\n\n//=polygons\n\n//=union\n</code></pre>\n<p><strong>Returns</strong> <code>Feature</code>, a combined Polygon or MultiPolygon feature</p>\n"},{"name":"turf-variance","example":"var polygons = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [-97.414398, 37.684092],\n          [-97.414398, 37.731353],\n          [-97.332344, 37.731353],\n          [-97.332344, 37.684092],\n          [-97.414398, 37.684092]\n        ]]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [-97.333717, 37.606072],\n          [-97.333717, 37.675397],\n          [-97.237586, 37.675397],\n          [-97.237586, 37.606072],\n          [-97.333717, 37.606072]\n        ]]\n      }\n    }\n  ]\n};\nvar points = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 200\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-97.401351, 37.719676]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 600\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-97.355346, 37.706639]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 100\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-97.387962, 37.70012]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 200\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-97.301788, 37.66507]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {\n        \"population\": 300\n      },\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-97.265052, 37.643325]\n      }\n    }\n  ]\n};\n\nvar aggregated = turf.variance(\n  polygons, points, 'population', 'variance');\n\nvar resultFeatures = points.features.concat(\n  aggregated.features);\nvar result = {\n  \"type\": \"FeatureCollection\",\n  \"features\": resultFeatures\n};\n\n//=result","desc":"<h3 id=\"-turf-variance-polygons-points-infield-outfield-\"><code>turf.variance(polygons, points, inField, outField)</code></h3>\n<p>Calculates the variance value of a field for Point features within a set of Polygon features.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>polygons</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Polygon features</td>\n</tr>\n<tr>\n<td><code>points</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Point features</td>\n</tr>\n<tr>\n<td><code>inField</code></td>\n<td>string</td>\n<td>the field in input data to analyze</td>\n</tr>\n<tr>\n<td><code>outField</code></td>\n<td>string</td>\n<td>the field in which to store results</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var polygons = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [-97.414398, 37.684092],\n          [-97.414398, 37.731353],\n          [-97.332344, 37.731353],\n          [-97.332344, 37.684092],\n          [-97.414398, 37.684092]\n        ]]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [-97.333717, 37.606072],\n          [-97.333717, 37.675397],\n          [-97.237586, 37.675397],\n          [-97.237586, 37.606072],\n          [-97.333717, 37.606072]\n        ]]\n      }\n    }\n  ]\n};\nvar points = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 200\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-97.401351, 37.719676]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 600\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-97.355346, 37.706639]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 100\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-97.387962, 37.70012]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 200\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-97.301788, 37.66507]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {\n        &quot;population&quot;: 300\n      },\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-97.265052, 37.643325]\n      }\n    }\n  ]\n};\n\nvar aggregated = turf.variance(\n  polygons, points, &#39;population&#39;, &#39;variance&#39;);\n\nvar resultFeatures = points.features.concat(\n  aggregated.features);\nvar result = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: resultFeatures\n};\n\n//=result\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, a FeatureCollection of Polygon features with properties listed as outField</p>\n"},{"name":"turf-within","example":"var searchWithin = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [[\n          [-46.653,-23.543],\n          [-46.634,-23.5346],\n          [-46.613,-23.543],\n          [-46.614,-23.559],\n          [-46.631,-23.567],\n          [-46.653,-23.560],\n          [-46.653,-23.543]\n        ]]\n      }\n    }\n  ]\n};\nvar points = {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-46.6318, -23.5523]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-46.6246, -23.5325]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-46.6062, -23.5513]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-46.663, -23.554]\n      }\n    }, {\n      \"type\": \"Feature\",\n      \"properties\": {},\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [-46.643, -23.557]\n      }\n    }\n  ]\n};\n\nvar ptsWithin = turf.within(points, searchWithin);\n\n//=points\n\n//=searchWithin\n\n//=ptsWithin","desc":"<h3 id=\"-turf-within-points-polygons-\"><code>turf.within(points, polygons)</code></h3>\n<p>Takes a FeatureCollection of Point features and a FeatureCollection of Polygon features and returns a FeatureCollection of Point features representing all points that fall within a collection of polygons.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<table>\n<thead>\n<tr>\n<th>parameter</th>\n<th>type</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>points</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Point features</td>\n</tr>\n<tr>\n<td><code>polygons</code></td>\n<td>FeatureCollection</td>\n<td>a FeatureCollection of Polygon features</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"example\">Example</h3>\n<pre><code class=\"lang-js\">var searchWithin = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [[\n          [-46.653,-23.543],\n          [-46.634,-23.5346],\n          [-46.613,-23.543],\n          [-46.614,-23.559],\n          [-46.631,-23.567],\n          [-46.653,-23.560],\n          [-46.653,-23.543]\n        ]]\n      }\n    }\n  ]\n};\nvar points = {\n  &quot;type&quot;: &quot;FeatureCollection&quot;,\n  &quot;features&quot;: [\n    {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-46.6318, -23.5523]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-46.6246, -23.5325]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-46.6062, -23.5513]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-46.663, -23.554]\n      }\n    }, {\n      &quot;type&quot;: &quot;Feature&quot;,\n      &quot;properties&quot;: {},\n      &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Point&quot;,\n        &quot;coordinates&quot;: [-46.643, -23.557]\n      }\n    }\n  ]\n};\n\nvar ptsWithin = turf.within(points, searchWithin);\n\n//=points\n\n//=searchWithin\n\n//=ptsWithin\n</code></pre>\n<p><strong>Returns</strong> <code>FeatureCollection</code>, a collection of all points that land within at least one polygon</p>\n"}]